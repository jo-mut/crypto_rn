["^ ","~:output",["^ ","~:js","goog.provide('steroid.fx');\nsteroid.fx.update_db = (function steroid$fx$update_db(cofx,fx){\nvar temp__5802__auto__ = new cljs.core.Keyword(null,\"db\",\"db\",993250759).cljs$core$IFn$_invoke$arity$1(fx);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar db = temp__5802__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cofx,new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n} else {\nreturn cofx;\n}\n});\nsteroid.fx.default_interceptors = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nsteroid.fx.set_default_interceptors = (function steroid$fx$set_default_interceptors(value){\nreturn cljs.core.reset_BANG_(steroid.fx.default_interceptors,value);\n});\nsteroid.fx.get_interceptors = (function steroid$fx$get_interceptors(interceptors){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref(steroid.fx.default_interceptors),interceptors], null);\n});\nsteroid.fx.mergeable_keys = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY);\nsteroid.fx.set_mergeable_keys = (function steroid$fx$set_mergeable_keys(value){\nreturn cljs.core.reset_BANG_(steroid.fx.mergeable_keys,value);\n});\nsteroid.fx.safe_merge = (function steroid$fx$safe_merge(fx,new_fx){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"merging-fx-with-common-keys\",\"merging-fx-with-common-keys\",-1375695184).cljs$core$IFn$_invoke$arity$1(fx))){\nreturn fx;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (merged_fx,p__17463){\nvar vec__17464 = p__17463;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17464,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17464,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"db\",\"db\",993250759),k)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(merged_fx,new cljs.core.Keyword(null,\"db\",\"db\",993250759),v);\n} else {\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(merged_fx,k))){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(steroid.fx.mergeable_keys),k))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(merged_fx,k,cljs.core.into,v);\n} else {\nreturn cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"merging-fx-with-common-keys\",\"merging-fx-with-common-keys\",-1375695184),k], null));\n}\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(merged_fx,k,v);\n}\n}\n}),fx,new_fx);\n}\n});\n/**\n * Takes a map of co-effects and forms as argument.\n *   The first optional form can be map of effects\n *   The next forms are functions applying effects and returning a map of effects.\n *   The fn ensures that updates to db are passed from function to function within the cofx :db key and\n *   that only a :merging-fx-with-common-keys effect is returned if some functions are trying\n *   to produce the same effects (excepted :db, :data-source/tx effects).\n *   :data-source/tx and effects are handled specially and their results\n *   (list of transactions) are compacted to one transactions list (for each effect). \n */\nsteroid.fx.merge = (function steroid$fx$merge(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___17480 = arguments.length;\nvar i__5727__auto___17481 = (0);\nwhile(true){\nif((i__5727__auto___17481 < len__5726__auto___17480)){\nargs__5732__auto__.push((arguments[i__5727__auto___17481]));\n\nvar G__17482 = (i__5727__auto___17481 + (1));\ni__5727__auto___17481 = G__17482;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((1) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((1)),(0),null)):null);\nreturn steroid.fx.merge.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5733__auto__);\n});\n\n(steroid.fx.merge.cljs$core$IFn$_invoke$arity$variadic = (function (p__17472,args){\nvar map__17473 = p__17472;\nvar map__17473__$1 = cljs.core.__destructure_map(map__17473);\nvar cofx = map__17473__$1;\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17473__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar vec__17474 = args;\nvar seq__17475 = cljs.core.seq(vec__17474);\nvar first__17476 = cljs.core.first(seq__17475);\nvar seq__17475__$1 = cljs.core.next(seq__17475);\nvar first_arg = first__17476;\nvar rest_args = seq__17475__$1;\nvar initial_fxs_QMARK_ = cljs.core.map_QMARK_(first_arg);\nvar fx_fns = ((initial_fxs_QMARK_)?rest_args:args);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (fxs,fx_fn){\nvar updated_cofx = steroid.fx.update_db(cofx,fxs);\nif(cljs.core.truth_(fx_fn)){\nreturn steroid.fx.safe_merge(fxs,(fx_fn.cljs$core$IFn$_invoke$arity$1 ? fx_fn.cljs$core$IFn$_invoke$arity$1(updated_cofx) : fx_fn.call(null, updated_cofx)));\n} else {\nreturn fxs;\n}\n}),((initial_fxs_QMARK_)?first_arg:new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"db\",\"db\",993250759),db], null)),fx_fns);\n}));\n\n(steroid.fx.merge.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(steroid.fx.merge.cljs$lang$applyTo = (function (seq17470){\nvar G__17471 = cljs.core.first(seq17470);\nvar seq17470__$1 = cljs.core.next(seq17470);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__17471,seq17470__$1);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","steroid/fx.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react"],"~:use-macros",null,"~:excludes",["~#set",["~$reduce","~$merge"]],"~:macros",["^ ","~$defn",["^ ","~:arglists",["~#list",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$body"]]],"~:doc","Defines an fx producing function\n  Takes the same arguments as the defn macro\n  Produces a 2 arity function:\n  - first arity takes the declared parameters and returns a function that takes cofx as\n  single argument, for use in composition of effects\n  - second arity takes cofx as first arguments and declared parameters as next arguments,\n  for use in repl or direct call\n  Notes:\n  - destructuring of cofx is possible\n  - supports docstring\n  - supports attr-map with optional :events key which needs to be a vector of\n  event keywords under which the function will be registered\n  - TODO: add suport for `prepost-map?` (don't forget to add it to arglist)\n  - TODO: add validation of macro parameters","^7",15,"^8",1,"^6","steroid/fx.clj","~:name","~$steroid.fx/defn","~:ns","~$steroid.fx","~:macro",true]],"^O","^R","~:reader-aliases",["^ "],"~:op","^Q","~:imports",null,"~:requires",["^ ","~$re-frame.core","^X","~$cljs.core","^Y","~$goog","^Z"],"~:seen",["^B",["~:require","~:require-macros"]],"~:uses",null,"^11",["^ ","^R","^R","^Y","^Y"],"~:form",["^H",["~$ns","^R",["^H",["^11","^R"]],["^H",["^10","^X"]],["^H",["~:refer-clojure","~:exclude",["^D","^C"]]]]],"~:flags",["^ ","^11",["^B",[]],"^10",["^B",[]]],"~:js-deps",[],"~:deps",["^Z","^Y","^X"]],"^Q","^R","~:resource-id",["~:shadow.build.classpath/resource","steroid/fx.cljs"],"~:compiled-at",1728556198937,"^T",["^ ","^X","^X","^Y","^Y","^Z","^Z","^R","^R"],"~:resource-name","steroid/fx.cljs","~:warnings",[],"~:source","(ns steroid.fx\n  (:require-macros steroid.fx)\n  (:require re-frame.core)\n  (:refer-clojure :exclude [merge reduce]))\n\n(defn- update-db [cofx fx]\n  (if-let [db (:db fx)]\n    (assoc cofx :db db)\n    cofx))\n\n(def ^:private default-interceptors (atom []))\n\n(defn set-default-interceptors [value]\n  (reset! default-interceptors value))\n\n(defn get-interceptors [interceptors]\n  [@default-interceptors interceptors])\n\n(def ^:private mergeable-keys (atom #{}))\n\n(defn set-mergeable-keys [value]\n  (reset! mergeable-keys value))\n\n(defn- safe-merge [fx new-fx]\n  (if (:merging-fx-with-common-keys fx)\n    fx\n    (clojure.core/reduce (fn [merged-fx [k v]]\n                           (if (= :db k)\n                             (assoc merged-fx :db v)\n                             (if (get merged-fx k)\n                               (if (get @mergeable-keys k)\n                                 (update merged-fx k into v)\n                                 (reduced {:merging-fx-with-common-keys k}))\n                               (assoc merged-fx k v))))\n                         fx\n                         new-fx)))\n\n(defn merge\n  \"Takes a map of co-effects and forms as argument.\n  The first optional form can be map of effects\n  The next forms are functions applying effects and returning a map of effects.\n  The fn ensures that updates to db are passed from function to function within the cofx :db key and\n  that only a :merging-fx-with-common-keys effect is returned if some functions are trying\n  to produce the same effects (excepted :db, :data-source/tx effects).\n  :data-source/tx and effects are handled specially and their results\n  (list of transactions) are compacted to one transactions list (for each effect). \"\n  [{:keys [db] :as cofx} & args]\n  (let [[first-arg & rest-args] args\n        initial-fxs? (map? first-arg)\n        fx-fns (if initial-fxs? rest-args args)]\n    (clojure.core/reduce (fn [fxs fx-fn]\n                           (let [updated-cofx (update-db cofx fxs)]\n                             (if fx-fn\n                               (safe-merge fxs (fx-fn updated-cofx))\n                               fxs)))\n                         (if initial-fxs? first-arg {:db db})\n                         fx-fns)))","~:reader-features",["^B",["~:cljs"]],"~:used-var-namespaces",["^B",["^R","^Y"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAKA,uBAAA,vBAAOA,sDAAWC,KAAKC;AAAvB,AACE,IAAAC,qBAAY,AAAA,8EAAKD;AAAjB,AAAA,oBAAAC;AAAA,SAAAA,LAASC;AAAT,AACE,0DAAA,nDAACC,8CAAMJ,qDAASG;;AAChBH;;;AAEJ,AAAeK,kCAAqB,6CAAA,7CAACC;AAErC,sCAAA,tCAAMC,oFAA0BC;AAAhC,AACE,OAACC,sBAAOJ,gCAAqBG;;AAE/B,8BAAA,9BAAMG,oEAAkBC;AAAxB,AAAA,0FAAA,AAAAF,gBACIL,iCAAqBO;;AAEzB,AAAeC,4BAAe,6CAAA,7CAACP;AAE/B,gCAAA,hCAAMQ,wEAAoBN;AAA1B,AACE,OAACC,sBAAOI,0BAAeL;;AAEzB,wBAAA,xBAAOO,wDAAYd,GAAGe;AAAtB,AACE,oBAAI,AAAA,kIAA8Bf;AAChCA;;AACA,OAACgB,+CAAoB,qBAAAC,VAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAgBG;QAAhB,AAAAF,4CAAAD,WAAA,IAAA,/DAAkBI;AAAlB,AACE,GAAI,6CAAA,7CAACC,6FAAMF;AACT,+DAAA,xDAAClB,8CAAMiB,0DAAcE;;AACrB,oBAAI,AAACE,4CAAIJ,UAAUC;AACjB,oBAAI,4CAAA,AAAAZ,5CAACe,4DAAKZ,2BAAeS;AACvB,OAACI,+CAAOL,UAAUC,EAAEK,eAAKJ;;AACzB,yBAAA,2CAAA,7DAACK,iKAAsCN;;;AACzC,OAAClB,8CAAMiB,UAAUC,EAAEC;;;GACzBtB,GACAe;;;AAEzB,AAAA;;;;;;;;;;mBAAA,2BAAAa,9CAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,sDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,wDAAA,WAAAG,nEAAMD,4EASqBS;AAT3B,AAAA,IAAAP,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PASmBrC;SATnB,AAAAyB,4CAAAY,eAAA,hEASWlC;AATX,AAUE,IAAA0C,aAA8BD;IAA9BE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAP,gBAAAK;IAAAA,iBAAA,AAAAJ,eAAAI;gBAAAE,ZAAOC;gBAAPH,ZAAmBI;IACbC,qBAAa,AAACC,qBAAKH;IACnBI,SAAO,EAAIF,oBAAaD,UAAUN;AAFxC,AAGE,OAAC3B,+CAAoB,WAAKqC,IAAIC;AAAT,AACE,IAAMC,eAAa,AAACzD,qBAAUC,KAAKsD;AAAnC,AACE,oBAAIC;AACF,OAACxC,sBAAWuC,IAAI,CAACC,sCAAAA,oDAAAA,hBAAMC,iCAAAA;;AACvBF;;GACN,gCAAA,2CAAA,zEAAIH,oBAAaF,qGAAe9C,YAChCkD;;;AAnBzB,CAAA,2CAAA,3CAAMlB;;AAAN;AAAA,CAAA,qCAAA,WAAAI,hDAAMJ;AAAN,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA","names",["steroid.fx/update-db","cofx","fx","temp__5802__auto__","db","cljs.core.assoc","steroid.fx/default-interceptors","cljs.core.atom","steroid.fx/set-default-interceptors","value","cljs.core/reset!","cljs.core/deref","steroid.fx/get-interceptors","interceptors","steroid.fx/mergeable-keys","steroid.fx/set-mergeable-keys","steroid.fx/safe-merge","new-fx","cljs.core.reduce","p__17463","vec__17464","cljs.core.nth","merged-fx","k","v","cljs.core._EQ_","cljs.core.get","cljs.core.update","cljs.core/into","cljs.core/reduced","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","steroid.fx/merge","p__17472","map__17473","cljs.core/--destructure-map","seq17470","G__17471","cljs.core/first","cljs.core/next","self__5711__auto__","args","vec__17474","seq__17475","cljs.core/seq","first__17476","first-arg","rest-args","initial-fxs?","cljs.core/map?","fx-fns","fxs","fx-fn","updated-cofx"]],"~:used-vars",["^B",["~$cljs.core/--destructure-map","~$cljs.core/=","~$cljs.core/IndexedSeq","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/atom","~$steroid.fx/safe-merge","~$steroid.fx/mergeable-keys","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/update","~$steroid.fx/get-interceptors","~$steroid.fx/set-mergeable-keys","~$cljs.core/get","~$steroid.fx/merge","~$steroid.fx/set-default-interceptors","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/next","~$steroid.fx/update-db","~$cljs.core/assoc","~$steroid.fx/default-interceptors","~$cljs.core/first"]]],"~:cache-keys",["~#cmap",[["^1;","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^Z","^Y","~$reagent.debug","~$reagent.impl.util"]]],["^1;","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.dom.HtmlElement"]]],["^1;","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1;","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.asserts"]]],["^1;","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2?","^2@","^2C","^2>","^2A","^2B"]]],["^1;","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2>"]]],["^1;","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$clojure.set"]]],["^1;","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C"]]],["^1;","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$clojure.string","~$clojure.walk","~$goog.object","^2;"]]],["^1;","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2?","~$goog.reflect","^2>"]]],["^1;","re_frame/router.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$re-frame.events","~$re-frame.interop","~$re-frame.loggers","~$re-frame.trace"]]],["^1;","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2Q","^2R"]]],["^1;","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2?","^2>"]]],["^1;","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2<","^2;","~$reagent.impl.batching","^2H","^2K"]]],["^1;","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1;","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","shadow/js.js"],["944456554bdfd632783ce6b3d5ae639677d8b442","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^?","^2I","^2<","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^2W","^2;","^2K"]]],["^1;","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C"]]],"~:SHADOW-TIMESTAMP",[1727947715000,1727947715000,1715719162000],["^1;","re_frame/events.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$re-frame.db","~$re-frame.utils","^2Q","~$re-frame.registrar","^2R","~$re-frame.interceptor","^2S"]]],["^1;","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","^2O"]]],["^1;","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","~$goog.fs.blob","^2D","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2F","^2G"]]],["^1;","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2F","~$goog.html.SafeUrl","^2G","^2C","^2>"]]],["^1;","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^35","~$goog.html.SafeStyle","^37","^2E","~$goog.html.uncheckedconversions","^2F","^2>"]]],["^1;","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.dom.TagName","^2C","~$goog.dom.element"]]],["^1;","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2K","^?","^2<","^2T","^2Z","^2W","^2;"]]],["^1;","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y"]]],["^1;","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2F","^35","^3<","~$goog.html.SafeStyleSheet","^37","^3>","^2E","^2G","^2C","^2L","~$goog.array","^2K","^2>","~$goog.dom.tags","^36"]]],["^1;","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2K"]]],["^1;","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","steroid/fx.cljs"],["5064fd346c5456030bb0d18ce63edb62ace2c232","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^X"]]],["^1;","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3A","^2>","^2?"]]],["^1;","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3A","^2C","^38","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3>","~$goog.dom.safe","^3;","^3=","~$goog.math.Coordinate","~$goog.math.Size","^2K","~$goog.string","^2F","~$goog.string.Unicode","~$goog.userAgent"]]],["^1;","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.debug.Error","^3D"]]],["^1;","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y"]]],["^1;","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3A","^2C","~$goog.collections.maps","^3H","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1;","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2@"]]],["^1;","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2Q"]]],["^1;","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",[]]],["^1;","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3A","^2K"]]],["^1;","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^3H","~$goog.string.StringBuffer"]]],["^1;","re_frame/cofx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^30","^33","^32","^2R"]]],["~:shadow.build.js-support/require","react"],["^?","shadow.js.shim.module$react.js","require","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$shadow.js"]]],["^1;","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C"]]],["^1;","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3E","^3=","^2F","^2>"]]],["^1;","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2R","^2Q","^2S","^2H"]]],["^1;","clojure/data.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2H"]]],["^1;","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2>","^2B"]]],["^1;","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^?","~$reagent.impl.template","^2X","^2<","^2T","^2Z","^2W","^2;"]]],["^1;","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.math"]]],["^1;","re_frame/std_interceptors.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^33","^2R","^32","^30","~$clojure.data","~$re-frame.cofx","^31","^2S"]]],["^1;","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.flags"]]],["^1;","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.debug.entryPointRegistry","~$goog.dom","^3>","^3:","^2L","^2M"]]],["^1;","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3D","^3>"]]],["^1;","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","^3;","^35","^3<","^3@","^37","^2E","^2F","^2>"]]],["^1;","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2R"]]],["^1;","re_frame/fx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","~$re-frame.router","^30","^33","^2Q","^2P","^32","^2R","^2S"]]],["^1;","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2X","^2T","^2Z"]]],["^1;","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z"]]],["^1;","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","~$goog.math.Long","~$goog.math.Integer","^3H","^2K","^3A","~$goog.Uri","^3Q"]]],["^1;","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2F","^2G","^36","^2C"]]],["^1;","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y"]]],["^1;","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2F","^3<","^2G","^2K","^2C","^2>"]]],["^1;","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2O"]]],["^1;","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^3J"]]],["^1;","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y"]]],["^1;","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","^3H"]]],["^1;","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^2C","^2G"]]],["^1;","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2Q","^2R","^3:"]]],["^1;","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^30","^2Q","^2R","^31","^32","^2S"]]],["^1;","re_frame/core.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^27",["^ ","^28",null,"^29",["^B",[]],"^2:",["^Z","^Y","^2P","~$re-frame.subs","^2Q","^30","~$re-frame.fx","^3W","^3[","^2R","^32","^33","~$re-frame.std-interceptors","^2H"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1685651089000,"jar:file:/Users/john/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame-steroid/re-frame-steroid/0.1.1/re-frame-steroid-0.1.1.jar!/steroid/fx.clj",1693680648000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","steroid/fx.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",["^C","^D"]],"^E",["^ ","^F",["^ ","^G",["^H",[["^I","^J","^K",["^L"],"^M"]]],"^N","Defines an fx producing function\n  Takes the same arguments as the defn macro\n  Produces a 2 arity function:\n  - first arity takes the declared parameters and returns a function that takes cofx as\n  single argument, for use in composition of effects\n  - second arity takes cofx as first arguments and declared parameters as next arguments,\n  for use in repl or direct call\n  Notes:\n  - destructuring of cofx is possible\n  - supports docstring\n  - supports attr-map with optional :events key which needs to be a vector of\n  event keywords under which the function will be registered\n  - TODO: add suport for `prepost-map?` (don't forget to add it to arglist)\n  - TODO: add validation of macro parameters","^7",15,"^8",1,"^6","steroid/fx.clj","^O","^P","^Q","^R","^S",true]],"^O","^R","^T",["^ "],"^V",null,"^W",["^ ","^X","^X","^Y","^Y","^Z","^Z"],"^[",["^B",["^10","^11"]],"^12",null,"~:defs",["^ ","~$update-db",["^ ","~:protocol-inline",null,"^5",["^ ","^6","steroid/fx.cljs","^7",6,"^8",8,"^9",6,"^:",17,"~:private",true,"^G",["^H",["~$quote",["^H",[["~$cofx","~$fx"]]]]]],"^54",true,"^O","^21","^6","steroid/fx.cljs","^:",17,"~:method-params",["^H",[["^56","^57"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^8",1,"~:variadic?",false,"^7",6,"~:ret-tag",["^B",[null,"~$clj","~$any"]],"^9",6,"~:max-fixed-arity",2,"~:fn-var",true,"^G",["^H",["^55",["^H",[["^56","^57"]]]]]],"~$default-interceptors",["^ ","^5",["^ ","^6","steroid/fx.cljs","^7",11,"^8",16,"^9",11,"^:",36,"^54",true],"^54",true,"^O","^23","^6","steroid/fx.cljs","^:",36,"^8",1,"^7",11,"^9",11,"~:tag","~$cljs.core/Atom"],"~$set-default-interceptors",["^ ","^53",null,"^5",["^ ","^6","steroid/fx.cljs","^7",13,"^8",7,"^9",13,"^:",31,"^G",["^H",["^55",["^H",[["~$value"]]]]]],"^O","^1Y","^6","steroid/fx.cljs","^:",31,"^58",["^H",[["^5E"]]],"^59",null,"^5:",["^H",[null,null]],"^8",1,"^5;",false,"^7",13,"^5<",["^B",[null,"^5>"]],"^9",13,"^5?",1,"^5@",true,"^G",["^H",["^55",["^H",[["^5E"]]]]]],"~$get-interceptors",["^ ","^53",null,"^5",["^ ","^6","steroid/fx.cljs","^7",16,"^8",7,"^9",16,"^:",23,"^G",["^H",["^55",["^H",[["~$interceptors"]]]]]],"^O","^1U","^6","steroid/fx.cljs","^:",23,"^58",["^H",[["^5G"]]],"^59",null,"^5:",["^H",[null,null]],"^8",1,"^5;",false,"^7",16,"^5<","~$cljs.core/IVector","^9",16,"^5?",1,"^5@",true,"^G",["^H",["^55",["^H",[["^5G"]]]]]],"~$mergeable-keys",["^ ","^5",["^ ","^6","steroid/fx.cljs","^7",19,"^8",16,"^9",19,"^:",30,"^54",true],"^54",true,"^O","^1P","^6","steroid/fx.cljs","^:",30,"^8",1,"^7",19,"^9",19,"^5B","^5C"],"~$set-mergeable-keys",["^ ","^53",null,"^5",["^ ","^6","steroid/fx.cljs","^7",21,"^8",7,"^9",21,"^:",25,"^G",["^H",["^55",["^H",[["^5E"]]]]]],"^O","^1V","^6","steroid/fx.cljs","^:",25,"^58",["^H",[["^5E"]]],"^59",null,"^5:",["^H",[null,null]],"^8",1,"^5;",false,"^7",21,"^5<",["^B",[null,"^5>"]],"^9",21,"^5?",1,"^5@",true,"^G",["^H",["^55",["^H",[["^5E"]]]]]],"~$safe-merge",["^ ","^53",null,"^5",["^ ","^6","steroid/fx.cljs","^7",24,"^8",8,"^9",24,"^:",18,"^54",true,"^G",["^H",["^55",["^H",[["^57","~$new-fx"]]]]]],"^54",true,"^O","^1O","^6","steroid/fx.cljs","^:",18,"^58",["^H",[["^57","^5L"]]],"^59",null,"^5:",["^H",[null,null]],"^8",1,"^5;",false,"^7",24,"^5<",["^B",[null,"^5>"]],"^9",24,"^5?",2,"^5@",true,"^G",["^H",["^55",["^H",[["^57","^5L"]]]]]],"^D",["^ ","^53",null,"^5",["^ ","^6","steroid/fx.cljs","^7",38,"^8",7,"^9",38,"^:",12,"^G",["^H",["^55",["^H",[[["^ ","~:keys",["~$db"],"~:as","^56"],"~$&","~$args"]]]]],"^N","Takes a map of co-effects and forms as argument.\n  The first optional form can be map of effects\n  The next forms are functions applying effects and returning a map of effects.\n  The fn ensures that updates to db are passed from function to function within the cofx :db key and\n  that only a :merging-fx-with-common-keys effect is returned if some functions are trying\n  to produce the same effects (excepted :db, :data-source/tx effects).\n  :data-source/tx and effects are handled specially and their results\n  (list of transactions) are compacted to one transactions list (for each effect). ","~:top-fn",["^ ","^5;",true,"~:fixed-arity",1,"^5?",1,"^58",[["^H",[["^ ","^5M",["^5N"],"^5O","^56"],"^5P"]]],"^G",["^H",[[["^ ","^5M",["^5N"],"^5O","^56"],"~$&","^5P"]]],"^5:",["^H",[null]]]],"^O","^1X","^6","steroid/fx.cljs","^:",12,"^5Q",["^ ","^5;",true,"^5R",1,"^5?",1,"^58",[["^H",[["^ ","^5M",["^5N"],"^5O","^56"],"^5P"]]],"^G",["^H",[[["^ ","^5M",["^5N"],"^5O","^56"],"~$&","^5P"]]],"^5:",["^H",[null]]],"^58",[["^H",[["^ ","^5M",["^5N"],"^5O","^56"],"^5P"]]],"^59",null,"^5R",1,"^5:",["^H",[null]],"^8",1,"^5;",true,"~:methods",[["^ ","^5R",1,"^5;",true,"^5B",["^B",[null,"^5>"]]]],"^7",38,"^5<","^5>","^9",38,"^5?",1,"^5@",true,"^G",["^H",[[["^ ","^5M",["^5N"],"^5O","^56"],"~$&","^5P"]]],"^N","Takes a map of co-effects and forms as argument.\n  The first optional form can be map of effects\n  The next forms are functions applying effects and returning a map of effects.\n  The fn ensures that updates to db are passed from function to function within the cofx :db key and\n  that only a :merging-fx-with-common-keys effect is returned if some functions are trying\n  to produce the same effects (excepted :db, :data-source/tx effects).\n  :data-source/tx and effects are handled specially and their results\n  (list of transactions) are compacted to one transactions list (for each effect). "]],"^11",["^ ","^R","^R","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^[",["^B",["~:db","~:merging-fx-with-common-keys"]],"~:order",["^5U","^5V"]],"^17",["^ ","^11",["^B",[]],"^10",["^B",[]]],"^18",[],"^19",["^Z","^Y","^X"]],"^Q","^R","~:ns-specs",["^ "],"~:ns-spec-vars",["^B",[]],"~:compiler-options",["^26",[["^5Z","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^5Z","~:shadow-tweaks"],null,["^5Z","~:source-map-inline"],null,["^5Z","~:shadow-optimize-constants"],null,["^5Z","~:elide-asserts"],false,["^5Z","~:optimize-constants"],null,["^5Z","^1>"],null,["^5Z","~:external-config"],null,["^5Z","~:tooling-config"],null,["^5Z","~:emit-constants"],null,["^5Z","~:load-tests"],null,["^5Z","~:form-size-threshold"],null,["^5Z","~:global-goog-object&array"],null,["^5Z","~:data-readers"],null,["^5Z","~:infer-externs"],"~:auto",["^5Z","^1@"],null,["^60","~:js-provider"],"^10",["~:mode"],"~:dev",["^5Z","~:fn-invoke-direct"],null,["^5Z","~:source-map"],"/dev/null"]]]