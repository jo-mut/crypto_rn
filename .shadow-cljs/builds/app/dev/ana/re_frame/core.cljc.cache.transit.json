["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\nre_frame.core.dispatch = re_frame.router.dispatch;\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\nre_frame.core.subscribe = re_frame.subs.subscribe;\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\n/**\n * This is a low level, advanced function.  You should probably be\n *   using reg-sub instead.\n *   Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\n */\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\n});\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (db event) -> db\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of this\n * chain.\n */\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\nvar G__10228 = arguments.length;\nswitch (G__10228) {\ncase 2:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of the\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\n * and, later, action effects.\n */\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\nvar G__10261 = arguments.length;\nswitch (G__10261) {\ncase 2:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (context-map event-vector) -> context-map\n * \n *   This form of registration is almost never used. \n */\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\nvar G__10274 = arguments.length;\nswitch (G__10274) {\ncase 2:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3);\n\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nre_frame.core.debug = re_frame.std_interceptors.debug;\nre_frame.core.path = re_frame.std_interceptors.path;\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\nre_frame.core.after = re_frame.std_interceptors.after;\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\nre_frame.core.console = re_frame.loggers.console;\n/**\n * Checkpoints the state of re-frame and returns a function which, when\n *   later called, will restore re-frame to that checkpointed state.\n * \n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\n *   \n */\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\nreturn (function (){\nvar original_subs_10392 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_10393 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\nvar seq__10306_10395 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_10393,original_subs_10392));\nvar chunk__10307_10396 = null;\nvar count__10308_10397 = (0);\nvar i__10309_10398 = (0);\nwhile(true){\nif((i__10309_10398 < count__10308_10397)){\nvar sub_10399 = chunk__10307_10396.cljs$core$IIndexed$_nth$arity$2(null, i__10309_10398);\nre_frame.interop.dispose_BANG_(sub_10399);\n\n\nvar G__10400 = seq__10306_10395;\nvar G__10401 = chunk__10307_10396;\nvar G__10402 = count__10308_10397;\nvar G__10403 = (i__10309_10398 + (1));\nseq__10306_10395 = G__10400;\nchunk__10307_10396 = G__10401;\ncount__10308_10397 = G__10402;\ni__10309_10398 = G__10403;\ncontinue;\n} else {\nvar temp__5804__auto___10404 = cljs.core.seq(seq__10306_10395);\nif(temp__5804__auto___10404){\nvar seq__10306_10405__$1 = temp__5804__auto___10404;\nif(cljs.core.chunked_seq_QMARK_(seq__10306_10405__$1)){\nvar c__5525__auto___10406 = cljs.core.chunk_first(seq__10306_10405__$1);\nvar G__10407 = cljs.core.chunk_rest(seq__10306_10405__$1);\nvar G__10408 = c__5525__auto___10406;\nvar G__10409 = cljs.core.count(c__5525__auto___10406);\nvar G__10410 = (0);\nseq__10306_10395 = G__10407;\nchunk__10307_10396 = G__10408;\ncount__10308_10397 = G__10409;\ni__10309_10398 = G__10410;\ncontinue;\n} else {\nvar sub_10411 = cljs.core.first(seq__10306_10405__$1);\nre_frame.interop.dispose_BANG_(sub_10411);\n\n\nvar G__10415 = cljs.core.next(seq__10306_10405__$1);\nvar G__10416 = null;\nvar G__10417 = (0);\nvar G__10418 = (0);\nseq__10306_10395 = G__10415;\nchunk__10307_10396 = G__10416;\ncount__10308_10397 = G__10417;\ni__10309_10398 = G__10418;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\n\nreturn null;\n});\n});\n/**\n * Remove all events queued for processing\n */\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null, );\n});\n/**\n * Registers a function `f` to be called after each event is processed\n * `f` will be called with two arguments:\n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This is useful in advanced cases like:\n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n *   be used at \"remove time\" to get rid of the right callback.\n *   \n */\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\nvar G__10326 = arguments.length;\nswitch (G__10326) {\ncase 1:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n}));\n\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null, id,f);\n}));\n\n(re_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2);\n\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null, id);\n});\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___10421 = arguments.length;\nvar i__5727__auto___10423 = (0);\nwhile(true){\nif((i__5727__auto___10423 < len__5726__auto___10421)){\nargs__5732__auto__.push((arguments[i__5727__auto___10423]));\n\nvar G__10426 = (i__5727__auto___10423 + (1));\ni__5727__auto___10423 = G__10426;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__10342_10427 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__10343_10428 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\nvar G__10344_10429 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__10345_10430 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__10342_10427,G__10343_10428,G__10344_10429,G__10345_10430) : re_frame.core.console.call(null, G__10342_10427,G__10343_10428,G__10344_10429,G__10345_10430));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\n}));\n\n(re_frame.core.register_handler.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.core.register_handler.cljs$lang$applyTo = (function (seq10333){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10333));\n}));\n\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___10431 = arguments.length;\nvar i__5727__auto___10432 = (0);\nwhile(true){\nif((i__5727__auto___10432 < len__5726__auto___10431)){\nargs__5732__auto__.push((arguments[i__5727__auto___10432]));\n\nvar G__10433 = (i__5727__auto___10432 + (1));\ni__5727__auto___10432 = G__10433;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__10357_10434 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__10358_10435 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\nvar G__10359_10436 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__10360_10437 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__10357_10434,G__10358_10435,G__10359_10436,G__10360_10437) : re_frame.core.console.call(null, G__10357_10434,G__10358_10435,G__10359_10436,G__10360_10437));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\n}));\n\n(re_frame.core.register_sub.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.core.register_sub.cljs$lang$applyTo = (function (seq10353){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10353));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^J","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Q","~$fx","~$re-frame.fx","~$re-frame.events","^T","~$loggers","~$re-frame.loggers","^S","^S","~$re-frame.registrar","^W","~$cljs.core","^X","~$interceptor","^Q","~$goog","^Z","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^W","^10","^10","^N","^N","~$events","^T","~$re-frame.std-interceptors","^15","^V","^V","^L","^L","~$interop","^J","~$std-interceptors","^15","^P","^P","^12","^12"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^15","~$fx-handler->interceptor","^15","~$ctx-handler->interceptor","^15"],"~:require-macros",["^ ","^X","^X"],"~:form",["~#list",["~$ns","^D",["^1@",["^19",["^T","~:as","^14"],["^L","^1B","^K"],["^J","^1B","^16"],["^12","^1B","^11"],["^S","^1B","^R"],["^P","^1B","^O"],["^10","^1B","^["],["^V","^1B","^U"],["^W","^1B","^13"],["^Q","^1B","^Y"],["^15","^1B","^17","~:refer",["^1;","^1<","^1="]],["^N","^1B","^M"]]]]],"~:flags",["^ ","^19",["^B",[]]],"~:js-deps",[],"~:deps",["^Z","^X","^T","^L","^J","^12","^S","^P","^10","^V","^W","^Q","^15","^N"]],"^G","^D","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1728556197979,"^E",["^ ","^J","^J","^K","^L","^M","^N","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^V","^S","^S","^W","^W","^X","^X","^Y","^Q","^Z","^Z","^[","^10","^11","^12","^13","^W","^10","^10","^N","^N","^14","^T","^15","^15","^V","^V","^L","^L","^16","^J","^17","^15","^P","^P","^12","^12"],"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^B",["~:cljs"]],"~:used-var-namespaces",["^B",["^J","^Q","^T","^S","^W","^X","~$js","^10","^N","^15","^V","^L","^P","^12","^D"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__10228","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__10261","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx","re-frame.std-interceptors/fx-handler->interceptor","G__10274","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__10306","cljs.core/seq","chunk__10307","count__10308","i__10309","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__10326","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback","re-frame.core/remove-post-event-callback","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq10333","self__5712__auto__","args","G__10342","G__10343","G__10344","G__10345","cljs.core.apply","re-frame.core/register-sub","seq10353","G__10357","G__10358","G__10359","G__10360"]],"~:used-vars",["^B",["~$re-frame.router/purge","~$re-frame.core/add-post-event-callback","~$re-frame.core/remove-post-event-callback","~$re-frame.interceptor/get-effect","~$re-frame.fx/kind","~$re-frame.core/clear-sub","~$re-frame.fx/reg-fx","~$re-frame.db/app-db","~$re-frame.core/clear-event","~$re-frame.core/register-sub","~$re-frame.core/assoc-coeffect","~$re-frame.fx/do-fx","~$re-frame.interop/dispose!","~$cljs.core/partial","~$re-frame.loggers/set-loggers!","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.core/dispatch","~$re-frame.interceptor/->interceptor","~$re-frame.core/on-changes","~$cljs.core/count","~$cljs.core/deref","~$re-frame.events/register","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$re-frame.events/kind","~$re-frame.core/enrich","~$re-frame.registrar/clear-handlers","~$re-frame.loggers/console","~$re-frame.core/get-coeffect","~$re-frame.core/assoc-effect","~$cljs.core/chunk-rest","~$re-frame.std-interceptors/trim-v","~$re-frame.core/reg-event-db","~$cljs.core/set","~$re-frame.core/reg-sub-raw","~$re-frame.core/dispatch-sync","~$re-frame.interceptor/enqueue","~$re-frame.core/subscribe","~$re-frame.std-interceptors/db-handler->interceptor","~$re-frame.core/trim-v","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$re-frame.subs/kind","~$re-frame.core/reg-fx","~$re-frame.core/purge-event-queue","~$re-frame.core/get-effect","~$cljs.core/vals","~$re-frame.std-interceptors/enrich","~$re-frame.subs/subscribe","~$re-frame.core/clear-cofx","~$re-frame.core/reg-event-ctx","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/-nth","~$re-frame.core/reg-event-fx","~$re-frame.interceptor/assoc-coeffect","~$re-frame.core/clear-fx","~$re-frame.cofx/reg-cofx","~$clojure.set/difference","~$re-frame.cofx/inject-cofx","~$re-frame.std-interceptors/fx-handler->interceptor","~$re-frame.subs/reg-sub","~$re-frame.cofx/kind","~$re-frame.core/register-handler","~$re-frame.router/dispatch-sync","~$re-frame.std-interceptors/after","~$re-frame.router/add-post-event-callback","~$re-frame.core/->interceptor","~$re-frame.core/inject-cofx","~$cljs.core/next","~$re-frame.core/set-loggers!","~$re-frame.interceptor/get-coeffect","~$re-frame.subs/query->reaction","~$re-frame.core/make-restore-fn","~$re-frame.interceptor/assoc-effect","~$re-frame.core/clear-subscription-cache!","~$re-frame.core/reg-sub","~$re-frame.cofx/inject-db","~$re-frame.router/event-queue","~$re-frame.std-interceptors/path","~$re-frame.core/console","~$re-frame.router/remove-post-event-callback","~$re-frame.core/reg-cofx","~$re-frame.router/dispatch","~$cljs.core/first","~$re-frame.core/path","~$re-frame.core/enqueue","~$re-frame.core/debug","~$js/Error","~$re-frame.std-interceptors/on-changes","~$re-frame.registrar/kind->id->handler","~$cljs.core/chunked-seq?","~$re-frame.core/after"]]],"~:cache-keys",["~#cmap",[["^1H","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^Z","^X","~$reagent.debug","~$reagent.impl.util"]]],["^1H","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.dom.HtmlElement"]]],["^1H","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1H","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.asserts"]]],["^1H","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4;","^4<","^4?","^4:","^4=","^4>"]]],["^1H","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4:"]]],["^1H","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^N"]]],["^1H","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?"]]],["^1H","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","~$clojure.string","~$clojure.walk","~$goog.object","^47"]]],["^1H","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4;","~$goog.reflect","^4:"]]],["^1H","re_frame/router.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^T","^J","^V","~$re-frame.trace"]]],["^1H","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^J","^V"]]],["^1H","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4;","^4:"]]],["^1H","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^48","^47","~$reagent.impl.batching","^N","^4F"]]],["^1H","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1H","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","shadow/js.js"],["944456554bdfd632783ce6b3d5ae639677d8b442","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^?","^4D","^48","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^4O","^47","^4F"]]],["^1H","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?"]]],"~:SHADOW-TIMESTAMP",[1727947715000,1727947715000,1715719162000],["^1H","re_frame/events.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^12","~$re-frame.utils","^J","^W","^V","^Q","^4K"]]],["^1H","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","^4J"]]],["^1H","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","~$goog.fs.blob","^4@","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4B","^4C"]]],["^1H","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4B","~$goog.html.SafeUrl","^4C","^4?","^4:"]]],["^1H","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4V","~$goog.html.SafeStyle","^4X","^4A","~$goog.html.uncheckedconversions","^4B","^4:"]]],["^1H","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.dom.TagName","^4?","~$goog.dom.element"]]],["^1H","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^4F","^?","^48","^4L","^4R","^4O","^47"]]],["^1H","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X"]]],["^1H","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4B","^4V","^51","~$goog.html.SafeStyleSheet","^4X","^53","^4A","^4C","^4?","^4G","~$goog.array","^4F","^4:","~$goog.dom.tags","^4W"]]],["^1H","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4F"]]],["^1H","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^56","^4:","^4;"]]],["^1H","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^56","^4?","^4Y","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^53","~$goog.dom.safe","^50","^52","~$goog.math.Coordinate","~$goog.math.Size","^4F","~$goog.string","^4B","~$goog.string.Unicode","~$goog.userAgent"]]],["^1H","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.debug.Error","^59"]]],["^1H","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X"]]],["^1H","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^56","^4?","~$goog.collections.maps","^5=","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1H","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4<"]]],["^1H","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^J"]]],["^1H","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",[]]],["^1H","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^56","^4F"]]],["^1H","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^5=","~$goog.string.StringBuffer"]]],["^1H","re_frame/cofx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^12","^Q","^W","^V"]]],["~:shadow.build.js-support/require","react"],["^?","shadow.js.shim.module$react.js","require","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$shadow.js"]]],["^1H","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?"]]],["^1H","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^5:","^52","^4B","^4:"]]],["^1H","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^V","^J","^4K","^N"]]],["^1H","clojure/data.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^N"]]],["^1H","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4:","^4>"]]],["^1H","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^?","~$reagent.impl.template","^4P","^48","^4L","^4R","^4O","^47"]]],["^1H","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.math"]]],["^1H","re_frame/std_interceptors.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^Q","^V","^W","^12","~$clojure.data","^P","^4T","^4K"]]],["^1H","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.flags"]]],["^1H","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.debug.entryPointRegistry","~$goog.dom","^53","^4[","^4G","^4H"]]],["^1H","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^59","^53"]]],["^1H","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","^50","^4V","^51","^55","^4X","^4A","^4B","^4:"]]],["^1H","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^V"]]],["^1H","re_frame/fx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^10","^12","^Q","^J","^T","^W","^V","^4K"]]],["^1H","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^4P","^4L","^4R"]]],["^1H","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z"]]],["^1H","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","~$goog.math.Long","~$goog.math.Integer","^5=","^4F","^56","~$goog.Uri","^5F"]]],["^1H","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4B","^4C","^4W","^4?"]]],["^1H","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X"]]],["^1H","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4B","^51","^4C","^4F","^4?","^4:"]]],["^1H","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4J"]]],["^1H","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^5?"]]],["^1H","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X"]]],["^1H","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","^5="]]],["^1H","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^4?","^4C"]]],["^1H","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^J","^V","^4["]]],["^1H","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^12","^J","^V","^4T","^W","^4K"]]],["^1H","re_frame/core.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^43",["^ ","^44",null,"^45",["^B",[]],"^46",["^Z","^X","^T","^L","^J","^12","^S","^P","^10","^V","^W","^Q","^15","^N"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1685651089000,"jar:file:/Users/john/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^E",["^ "],"^H",null,"^I",["^ ","^J","^J","^K","^L","^M","^N","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^V","^S","^S","^W","^W","^X","^X","^Y","^Q","^Z","^Z","^[","^10","^11","^12","^13","^W","^10","^10","^N","^N","^14","^T","^15","^15","^V","^V","^L","^L","^16","^J","^17","^15","^P","^P","^12","^12"],"^18",["^B",["^19"]],"~:shadow/js-access-global",["^B",["Error"]],"^1:",["^ ","^1;","^15","^1<","^15","^1=","^15"],"~:defs",["^ ","~$console",["^ ","^C","^3P","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^C","^2=","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^C","^2E","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1@",["~$quote",["^1@",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^C","^2N","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1@",[["^6U","^6V"]]],"~:protocol-impl",null,"~:arglists-meta",["^1@",[null,null]],"^8",1,"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^6S",["^1@",["^6T",["^1@",[["^6U","^6V"]]]]],"^6W","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^C","^2Q","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^C","^24","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^6S",["^1@",["^6T",["^1@",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^6[",true,"~:fixed-arity",0,"^72",0,"^6X",[["^1@",["^77"]]],"^6S",["^1@",[["~$&","^77"]]],"^6Z",["^1@",[null]]]],"^C","^23","^6","re_frame/core.cljc","^:",19,"^78",["^ ","^6[",true,"^79",0,"^72",0,"^6X",[["^1@",["^77"]]],"^6S",["^1@",[["~$&","^77"]]],"^6Z",["^1@",[null]]],"^6X",[["^1@",["^77"]]],"^6Y",null,"^79",0,"^6Z",["^1@",[null]],"^8",1,"^6[",true,"~:methods",[["^ ","^79",0,"^6[",true,"~:tag","^71"]],"^7",234,"^70","^71","^9",234,"^72",0,"^73",true,"^6S",["^1@",[["~$&","^77"]]]],"~$purge-event-queue",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^6S",["^1@",["^6T",["^1@",[[]]]]],"^6W","Remove all events queued for processing"],"^C","^2Y","^6","re_frame/core.cljc","^:",24,"^6X",["^1@",[[]]],"^6Y",null,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7",194,"^70","^71","^9",194,"^72",0,"^73",true,"^6S",["^1@",["^6T",["^1@",[[]]]]],"^6W","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^6S",["^1@",["^6T",["^1@",[["~$id"]]]]]],"^C","^1X","^6","re_frame/core.cljc","^:",33,"^6X",["^1@",[["^7>"]]],"^6Y",null,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7",222,"^70","^71","^9",222,"^72",1,"^73",true,"^6S",["^1@",["^6T",["^1@",[["^7>"]]]]]],"~$path",["^ ","^C","^3U","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^C","^3L","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^6S",["^1@",["^6T",["^1@",[[]]]]],"^6W","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^C","^3I","^6","re_frame/core.cljc","^:",22,"^6X",["^1@",[[]]],"^6Y",null,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7",169,"^70","~$function","^9",169,"^72",0,"^73",true,"^6S",["^1@",["^6T",["^1@",[[]]]]],"^6W","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^C","^38","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^7;","^7B"],"~$get-effect",["^ ","^C","^2Z","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^6S",["^1@",["^6T",["^1@",[["^7>","~$handler"],["^7>","~$interceptors","^7F"]]]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]]],"^C","^2L","^6","re_frame/core.cljc","^:",19,"^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]],"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6Y",null,"^79",3,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7:",[["^ ","^79",2,"^6[",false,"^7;","^71"],["^ ","^79",3,"^6[",false,"^7;","^71"]],"^7",71,"^9",71,"^72",3,"^73",true,"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^C","^2O","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^C","^22","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^7;","^7B"],"~$->interceptor",["^ ","^C","^3C","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^C","^3F","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^C","^3D","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^C","^2H","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^C","^3W","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^7;","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^C","^2I","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^C","^3V","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^C","^32","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^7;","^7B"],"~$reg-event-ctx",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^6S",["^1@",["^6T",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]]],"^C","^33","^6","re_frame/core.cljc","^:",20,"^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]],"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6Y",null,"^79",3,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7:",[["^ ","^79",2,"^6[",false,"^7;","^71"],["^ ","^79",3,"^6[",false,"^7;","^71"]],"^7",104,"^9",104,"^72",3,"^73",true,"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^C","^2X","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^C","^2S","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^7;","^7O"],"~$clear-sub",["^ ","^C","^1[","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^7;","^7B"],"~$dispatch",["^ ","^C","^2;","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^C","^40","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^6S",["^1@",["^6T",["^1@",[["~$f"],["^7>","~$f"]]]]],"^6W","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^78",["^ ","^6[",false,"^79",2,"^72",2,"^6X",[["~$f"],["^7>","~$f"]],"^6S",["^1@",[["~$f"],["^7>","~$f"]]],"^6Z",["^1@",[null,null]]]],"^C","^1W","^6","re_frame/core.cljc","^:",30,"^78",["^ ","^6[",false,"^79",2,"^72",2,"^6X",[["~$f"],["^7>","~$f"]],"^6S",["^1@",[["~$f"],["^7>","~$f"]]],"^6Z",["^1@",[null,null]]],"^6X",[["~$f"],["^7>","~$f"]],"^6Y",null,"^79",2,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7:",[["^ ","^79",1,"^6[",false,"^7;","^71"],["^ ","^79",2,"^6[",false,"^7;","^71"]],"^7",201,"^9",201,"^72",2,"^73",true,"^6S",["^1@",[["~$f"],["^7>","~$f"]]],"^6W","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^C","^3R","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^6S",["^1@",["^6T",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]]],"^C","^36","^6","re_frame/core.cljc","^:",19,"^78",["^ ","^6[",false,"^79",3,"^72",3,"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6Z",["^1@",[null,null]]],"^6X",[["^7>","^7F"],["^7>","^7G","^7F"]],"^6Y",null,"^79",3,"^6Z",["^1@",[null,null]],"^8",1,"^6[",false,"^7:",[["^ ","^79",2,"^6[",false,"^7;","^71"],["^ ","^79",3,"^6[",false,"^7;","^71"]],"^7",87,"^9",87,"^72",3,"^73",true,"^6S",["^1@",[["^7>","^7F"],["^7>","^7G","^7F"]]],"^6W","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^6R",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^6S",["^1@",["^6T",["^1@",[["~$&","^77"]]]]],"^78",["^ ","^6[",true,"^79",0,"^72",0,"^6X",[["^1@",["^77"]]],"^6S",["^1@",[["~$&","^77"]]],"^6Z",["^1@",[null]]]],"^C","^3?","^6","re_frame/core.cljc","^:",23,"^78",["^ ","^6[",true,"^79",0,"^72",0,"^6X",[["^1@",["^77"]]],"^6S",["^1@",[["~$&","^77"]]],"^6Z",["^1@",[null]]],"^6X",[["^1@",["^77"]]],"^6Y",null,"^79",0,"^6Z",["^1@",[null]],"^8",1,"^6[",true,"^7:",[["^ ","^79",0,"^6[",true,"^7;","^71"]],"^7",229,"^70","^71","^9",229,"^72",0,"^73",true,"^6S",["^1@",[["~$&","^77"]]]],"~$clear-subscription-cache!",["^ ","^C","^3K","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1>",["^ ","^X","^X"],"~:cljs.analyzer/constants",["^ ","^18",["^B",["~:warn"]],"~:order",["^83"]],"^1D",["^ ","^19",["^B",[]]],"^1E",[],"^1F",["^Z","^X","^T","^L","^J","^12","^S","^P","^10","^V","^W","^Q","^15","^N"]],"^G","^D","~:ns-specs",["^ "],"~:ns-spec-vars",["^B",[]],"~:compiler-options",["^42",[["^87","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^87","~:shadow-tweaks"],null,["^87","~:source-map-inline"],null,["^87","~:shadow-optimize-constants"],null,["^87","~:elide-asserts"],false,["^87","~:optimize-constants"],null,["^87","^1K"],null,["^87","~:external-config"],null,["^87","~:tooling-config"],null,["^87","~:emit-constants"],null,["^87","~:load-tests"],null,["^87","~:form-size-threshold"],null,["^87","~:global-goog-object&array"],null,["^87","~:data-readers"],null,["^87","~:infer-externs"],"~:auto",["^87","^1M"],null,["^89","~:js-provider"],"^19",["~:mode"],"~:dev",["^87","~:fn-invoke-direct"],null,["^87","~:source-map"],"/dev/null"]]]