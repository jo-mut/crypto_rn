["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\n/**\n * Create an interceptor from named arguments\n */\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___9717 = arguments.length;\nvar i__5727__auto___9718 = (0);\nwhile(true){\nif((i__5727__auto___9718 < len__5726__auto___9717)){\nargs__5732__auto__.push((arguments[i__5727__auto___9718]));\n\nvar G__9719 = (i__5727__auto___9718 + (1));\ni__5727__auto___9718 = G__9719;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__9662){\nvar map__9663 = p__9662;\nvar map__9663__$1 = cljs.core.__destructure_map(map__9663);\nvar m = map__9663__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9663__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9663__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9663__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5802__auto___9722 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5802__auto___9722){\nvar unknown_keys_9726 = temp__5802__auto___9722;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_9726], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5002__auto__ = id;\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq9651){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9651));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__9671 = arguments.length;\nswitch (G__9671) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___9736 = arguments.length;\nvar i__5727__auto___9737 = (0);\nwhile(true){\nif((i__5727__auto___9737 < len__5726__auto___9736)){\nargs__5732__auto__.push((arguments[i__5727__auto___9737]));\n\nvar G__9738 = (i__5727__auto___9737 + (1));\ni__5727__auto___9737 = G__9738;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq9678){\nvar G__9679 = cljs.core.first(seq9678);\nvar seq9678__$1 = cljs.core.next(seq9678);\nvar G__9680 = cljs.core.first(seq9678__$1);\nvar seq9678__$2 = cljs.core.next(seq9678__$1);\nvar G__9681 = cljs.core.first(seq9678__$2);\nvar seq9678__$3 = cljs.core.next(seq9678__$2);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__9679,G__9680,G__9681,seq9678__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__9687 = arguments.length;\nswitch (G__9687) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___9740 = arguments.length;\nvar i__5727__auto___9741 = (0);\nwhile(true){\nif((i__5727__auto___9741 < len__5726__auto___9740)){\nargs__5732__auto__.push((arguments[i__5727__auto___9741]));\n\nvar G__9742 = (i__5727__auto___9741 + (1));\ni__5727__auto___9741 = G__9742;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq9690){\nvar G__9692 = cljs.core.first(seq9690);\nvar seq9690__$1 = cljs.core.next(seq9690);\nvar G__9693 = cljs.core.first(seq9690__$1);\nvar seq9690__$2 = cljs.core.next(seq9690__$1);\nvar G__9694 = cljs.core.first(seq9690__$2);\nvar seq9690__$3 = cljs.core.next(seq9690__$2);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__9692,G__9693,G__9694,seq9690__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5802__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar f = temp__5802__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null, context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__9743 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__9743;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__9706 = arguments.length;\nswitch (G__9706) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__9510__auto___9750 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__9510__auto___9750);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^J","~$re-frame.interop","^K","~$re-frame.trace","^L","~$trace","^L","~$clojure.set","^N","~$set","^N","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$console","^J","~$empty-queue","^K","~$debug-enabled?","^K"],"~:require-macros",["^ ","^L","^L","^M","^L","^P","^P"],"~:form",["~#list",["~$ns","^D",["^Z",["^S",["^J","~:refer",["^U"]],["^K","^10",["^V","^W"]],["^L","~:as","^M","~:include-macros",true],["^N","^11","^O"]]]]],"~:flags",["^ ","^S",["^B",[]]],"~:js-deps",[],"~:deps",["^Q","^P","^J","^K","^L","^N"]],"^G","^D","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1728556197786,"^E",["^ ","^J","^J","^K","^K","^L","^L","^M","^L","^N","^N","^O","^N","^P","^P","^Q","^Q"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^B",["~:cljs"]],"~:used-var-namespaces",["^B",["^K","^D","^L","^P","~$js","^N","^J"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__9662","map__9663","cljs.core/--destructure-map","cljs.core.get","seq9651","self__5712__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5802__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__5002__auto__","G__9671","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq9678","G__9679","cljs.core/first","cljs.core/next","G__9680","G__9681","self__5711__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__9687","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq9690","G__9692","G__9693","G__9694","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__9706","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__9510__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^B",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^17","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^Q","^P","~$reagent.debug","~$reagent.impl.util"]]],["^17","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.dom.HtmlElement"]]],["^17","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^17","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.asserts"]]],["^17","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2Q","^2R","^2U","^2P","^2S","^2T"]]],["^17","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2P"]]],["^17","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^N"]]],["^17","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U"]]],["^17","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","~$clojure.string","~$clojure.walk","~$goog.object","^2M"]]],["^17","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2Q","~$goog.reflect","^2P"]]],["^17","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2Q","^2P"]]],["^17","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^2N","^2M","~$reagent.impl.batching","^N","^30"]]],["^17","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^17","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","shadow/js.js"],["944456554bdfd632783ce6b3d5ae639677d8b442","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^?","^2Z","^2N","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^38","^2M","^30"]]],["^17","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U"]]],"~:SHADOW-TIMESTAMP",[1727947715000,1727947715000,1715719162000],["^17","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","^34"]]],["^17","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","~$goog.fs.blob","^2V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2X","^2Y"]]],["^17","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2X","~$goog.html.SafeUrl","^2Y","^2U","^2P"]]],["^17","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3>","~$goog.html.SafeStyle","^3@","^2W","~$goog.html.uncheckedconversions","^2X","^2P"]]],["^17","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.dom.TagName","^2U","~$goog.dom.element"]]],["^17","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^30","^?","^2N","^35","^3;","^38","^2M"]]],["^17","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P"]]],["^17","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2X","^3>","^3E","~$goog.html.SafeStyleSheet","^3@","^3G","^2W","^2Y","^2U","^31","~$goog.array","^30","^2P","~$goog.dom.tags","^3?"]]],["^17","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^30"]]],["^17","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3J","^2P","^2Q"]]],["^17","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3J","^2U","^3A","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3G","~$goog.dom.safe","^3D","^3F","~$goog.math.Coordinate","~$goog.math.Size","^30","~$goog.string","^2X","~$goog.string.Unicode","~$goog.userAgent"]]],["^17","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.debug.Error","^3M"]]],["^17","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P"]]],["^17","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3J","^2U","~$goog.collections.maps","^3Q","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2R"]]],["^17","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",[]]],["^17","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3J","^30"]]],["^17","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^3Q","~$goog.string.StringBuffer"]]],["~:shadow.build.js-support/require","react"],["^?","shadow.js.shim.module$react.js","require","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$shadow.js"]]],["^17","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U"]]],["^17","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3N","^3F","^2X","^2P"]]],["^17","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^J","^K","^L","^N"]]],["^17","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2P","^2T"]]],["^17","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^?","~$reagent.impl.template","^39","^2N","^35","^3;","^38","^2M"]]],["^17","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.math"]]],["^17","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.flags"]]],["^17","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.debug.entryPointRegistry","~$goog.dom","^3G","^3C","^31","^32"]]],["^17","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3M","^3G"]]],["^17","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","^3D","^3>","^3E","^3I","^3@","^2W","^2X","^2P"]]],["^17","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^39","^35","^3;"]]],["^17","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q"]]],["^17","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","~$goog.math.Long","~$goog.math.Integer","^3Q","^30","^3J","~$goog.Uri","^3Z"]]],["^17","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2X","^2Y","^3?","^2U"]]],["^17","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P"]]],["^17","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2X","^3E","^2Y","^30","^2U","^2P"]]],["^17","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^34"]]],["^17","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^3S"]]],["^17","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P"]]],["^17","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","^3Q"]]],["^17","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^2U","^2Y"]]],["^17","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2I",["^ ","^2J",null,"^2K",["^B",[]],"^2L",["^Q","^P","^K","^J","^3C"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1685651089000,"jar:file:/Users/john/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^E",["^ "],"^H",null,"^I",["^ ","^J","^J","^K","^K","^L","^L","^M","^L","^N","^N","^O","^N","^P","^P","^Q","^Q"],"^R",["^B",["^S"]],"~:shadow/js-access-global",["^B",["Error"]],"^T",["^ ","^U","^J","^V","^K","^W","^K"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",20,"~:arglists",["^Z",["~$quote",["^Z",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^Z",["^59","^5:","~$f","^5;"]]],"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]],"~:arglists-meta",["^Z",[null]]]],"^C","^1Q","^6","re_frame/interceptor.cljc","^:",20,"^5<",["^ ","^5=",true,"^5>",3,"^5?",3,"^5@",[["^Z",["^59","^5:","~$f","^5;"]]],"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]],"^5A",["^Z",[null]]],"^5@",[["^Z",["^59","^5:","~$f","^5;"]]],"~:protocol-impl",null,"^5>",3,"^5A",["^Z",[null]],"^8",1,"^5=",true,"~:methods",[["^ ","^5>",3,"^5=",true,"~:tag","~$any"]],"^7",43,"~:ret-tag","^5E","^9",43,"^5?",3,"~:fn-var",true,"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]]],"~$invoke-interceptors",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",75,"^8",8,"^9",75,"^:",27,"~:private",true,"^57",["^Z",["^58",["^Z",[["^59","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5I",true,"^C","^1S","^6","re_frame/interceptor.cljc","^:",27,"^5@",["^Z",[["^59","^5J"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",75,"^9",75,"^5?",2,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59","^5J"]]]]],"^5K","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",21,"^57",["^Z",["^58",["^Z",[["^59","^5:","~$value"]]]]]],"^C","^25","^6","re_frame/interceptor.cljc","^:",21,"^5@",["^Z",[["^59","^5:","^5M"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",57,"^5F",["^B",["~$clj","^5E"]],"^9",57,"^5?",3,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59","^5:","^5M"]]]]]],"~$update-coeffect",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",22,"^57",["^Z",["^58",["^Z",[["^59","^5:","~$f","~$&","^5;"]]]]],"^5<",["^ ","^5=",true,"^5>",3,"^5?",3,"^5@",[["^Z",["^59","^5:","~$f","^5;"]]],"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]],"^5A",["^Z",[null]]]],"^C","^22","^6","re_frame/interceptor.cljc","^:",22,"^5<",["^ ","^5=",true,"^5>",3,"^5?",3,"^5@",[["^Z",["^59","^5:","~$f","^5;"]]],"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]],"^5A",["^Z",[null]]],"^5@",[["^Z",["^59","^5:","~$f","^5;"]]],"^5B",null,"^5>",3,"^5A",["^Z",[null]],"^8",1,"^5=",true,"^5C",[["^ ","^5>",3,"^5=",true,"^5D","^5E"]],"^7",61,"^5F","^5E","^9",61,"^5?",3,"^5G",true,"^57",["^Z",[["^59","^5:","~$f","~$&","^5;"]]]],"~$invoke-interceptor-fn",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",68,"^8",8,"^9",68,"^:",29,"^5I",true,"^57",["^Z",["^58",["^Z",[["^59","~$interceptor","^5J"]]]]]],"^5I",true,"^C","^2D","^6","re_frame/interceptor.cljc","^:",29,"^5@",["^Z",[["^59","^5Q","^5J"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",68,"^5F",["^B",[null,"^5E"]],"^9",68,"^5?",3,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59","^5Q","^5J"]]]]]],"~$get-effect",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^57",["^Z",["^58",["^Z",[["^59"],["^59","^5:"],["^59","^5:","~$not-found"]]]]],"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]],"^5A",["^Z",[null,null,null]]]],"^C","^1G","^6","re_frame/interceptor.cljc","^:",17,"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]],"^5A",["^Z",[null,null,null]]],"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^5B",null,"^5>",3,"^5A",["^Z",[null,null,null]],"^8",1,"^5=",false,"^5C",[["^ ","^5>",1,"^5=",false,"^5D","^5E"],["^ ","^5>",2,"^5=",false,"^5D","^5E"],["^ ","^5>",3,"^5=",false,"^5D",["^B",[null,"^5E"]]]],"^7",31,"^9",31,"^5?",3,"^5G",true,"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]]],"~$->interceptor",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^57",["^Z",["^58",["^Z",[["~$&",["^ ","^11","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5K","Create an interceptor from named arguments","^5<",["^ ","^5=",true,"^5>",0,"^5?",0,"^5@",[["^Z",[["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^57",["^Z",[["~$&",["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^5A",["^Z",[null]]]],"^C","^1L","^6","re_frame/interceptor.cljc","^:",20,"^5<",["^ ","^5=",true,"^5>",0,"^5?",0,"^5@",[["^Z",[["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^57",["^Z",[["~$&",["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^5A",["^Z",[null]]],"^5@",[["^Z",[["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^5B",null,"^5>",0,"^5A",["^Z",[null]],"^8",1,"^5=",true,"^5C",[["^ ","^5>",0,"^5=",true,"^5D","~$cljs.core/IMap"]],"^7",17,"^5F","^5E","^9",17,"^5?",0,"^5G",true,"^57",["^Z",[["~$&",["^ ","^11","~$m","^5U",["^5V","^5W","^5X"]]]]],"^5K","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",49,"^8",7,"^9",49,"^:",19,"^57",["^Z",["^58",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]]]],"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]],"^5A",["^Z",[null,null,null]]]],"^C","^2:","^6","re_frame/interceptor.cljc","^:",19,"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]],"^5A",["^Z",[null,null,null]]],"^5@",[["^59"],["^59","^5:"],["^59","^5:","^5S"]],"^5B",null,"^5>",3,"^5A",["^Z",[null,null,null]],"^8",1,"^5=",false,"^5C",[["^ ","^5>",1,"^5=",false,"^5D","^5E"],["^ ","^5>",2,"^5=",false,"^5D","^5E"],["^ ","^5>",3,"^5=",false,"^5D",["^B",[null,"^5E"]]]],"^7",49,"^9",49,"^5?",3,"^5G",true,"^57",["^Z",[["^59"],["^59","^5:"],["^59","^5:","^5S"]]]],"~$execute",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",149,"^8",7,"^9",149,"^:",14,"^57",["^Z",["^58",["^Z",[["~$event-v","~$interceptors"]]]]],"^5K","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^C","^1J","^6","re_frame/interceptor.cljc","^:",14,"^5@",["^Z",[["^60","^61"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",149,"^5F","^5E","^9",149,"^5?",2,"^5G",true,"^57",["^Z",["^58",["^Z",[["^60","^61"]]]]],"^5K","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^57",["^Z",["^58",["^Z",[["^59","^5:","^5M"]]]]]],"^C","^2<","^6","re_frame/interceptor.cljc","^:",19,"^5@",["^Z",[["^59","^5:","^5M"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",39,"^5F",["^B",["^5N","^5E"]],"^9",39,"^5?",3,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59","^5:","^5M"]]]]]],"~$enqueue",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",112,"^8",7,"^9",112,"^:",14,"^57",["^Z",["^58",["^Z",[["^59","^61"]]]]],"^5K","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^C","^1V","^6","re_frame/interceptor.cljc","^:",14,"^5@",["^Z",[["^59","^61"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",112,"^5F",["^B",["^5N","^5E"]],"^9",112,"^5?",2,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59","^61"]]]]],"^5K","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^C","^2F","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5D","~$cljs.core/ISet"],"~$interceptor?",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^57",["^Z",["^58",["^Z",[["~$m"]]]]]],"^C","^2=","^6","re_frame/interceptor.cljc","^:",19,"^5@",["^Z",[["~$m"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",11,"^5F","~$boolean","^9",11,"^5?",1,"^5G",true,"^57",["^Z",["^58",["^Z",[["~$m"]]]]]],"~$change-direction",["^ ","^56",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",135,"^8",8,"^9",135,"^:",24,"^5I",true,"^57",["^Z",["^58",["^Z",[["^59"]]]]],"^5K","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5I",true,"^C","^27","^6","re_frame/interceptor.cljc","^:",24,"^5@",["^Z",[["^59"]]],"^5B",null,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^7",135,"^5F",["^B",["^5N","^5E"]],"^9",135,"^5?",1,"^5G",true,"^57",["^Z",["^58",["^Z",[["^59"]]]]],"^5K","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^59",["^ ","^56",null,"^5",["^ ","^5I",true,"^6","re_frame/interceptor.cljc","^:",15,"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["~$event","^61"],["^69","^61","~$db"]],"^57",["^Z",[["^69","^61"],["^69","^61","^6:"]]],"^5A",["^Z",[null,null]]],"^8",8,"^7",124,"^9",124,"^57",["^Z",["^58",["^Z",[["^69","^61"],["^69","^61","^6:"]]]]],"^5K","Create a fresh context"],"^5I",true,"^C","^1F","^6","re_frame/interceptor.cljc","^:",15,"^5<",["^ ","^5=",false,"^5>",3,"^5?",3,"^5@",[["^69","^61"],["^69","^61","^6:"]],"^57",["^Z",[["^69","^61"],["^69","^61","^6:"]]],"^5A",["^Z",[null,null]]],"^5@",[["^69","^61"],["^69","^61","^6:"]],"^5B",null,"^5>",3,"^5A",["^Z",[null,null]],"^8",1,"^5=",false,"^5C",[["^ ","^5>",2,"^5=",false,"^5D",["^B",["^5N","^5E"]]],["^ ","^5>",3,"^5=",false,"^5D",["^B",["^5N","^5E"]]]],"^7",124,"^9",124,"^5?",3,"^5G",true,"^57",["^Z",[["^69","^61"],["^69","^61","^6:"]]],"^5K","Create a fresh context"]],"^X",["^ ","^L","^L","^M","^L","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^B",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6A","^6B","^6H","^6E","^6<","^6C","^6F","^6?","^6D","^6@","^6>","^6=","^6G"]],"^13",["^ ","^S",["^B",[]]],"^14",[],"^15",["^Q","^P","^J","^K","^L","^N"]],"^G","^D","~:ns-specs",["^ "],"~:ns-spec-vars",["^B",[]],"~:compiler-options",["^2H",[["^6L","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^6L","~:shadow-tweaks"],null,["^6L","~:source-map-inline"],null,["^6L","~:shadow-optimize-constants"],null,["^6L","~:elide-asserts"],false,["^6L","~:optimize-constants"],null,["^6L","^1:"],null,["^6L","~:external-config"],null,["^6L","~:tooling-config"],null,["^6L","~:emit-constants"],null,["^6L","~:load-tests"],null,["^6L","~:form-size-threshold"],null,["^6L","~:global-goog-object&array"],null,["^6L","~:data-readers"],null,["^6L","~:infer-externs"],"~:auto",["^6L","^1<"],null,["^6N","~:js-provider"],"^S",["~:mode"],"~:dev",["^6L","~:fn-invoke-direct"],null,["^6L","~:source-map"],"/dev/null"]]]