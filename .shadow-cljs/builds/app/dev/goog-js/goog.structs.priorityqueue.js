["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/structs/priorityqueue.js"],"~:js","goog.loadModule(function(exports) {\n  \"use strict\";\n  goog.module(\"goog.structs.PriorityQueue\");\n  goog.module.declareLegacyNamespace();\n  var Heap = goog.require(\"goog.structs.Heap\");\n  var PriorityQueue = function() {\n    return Heap.apply(this, arguments) || this;\n  };\n  $jscomp.inherits(PriorityQueue, Heap);\n  PriorityQueue.prototype.enqueue = function(priority, value) {\n    this.insert(priority, value);\n  };\n  PriorityQueue.prototype.dequeue = function() {\n    return this.remove();\n  };\n  exports = PriorityQueue;\n  return exports;\n});\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Datastructure: Priority Queue.\n *\n *\n * This file provides the implementation of a Priority Queue. Smaller priorities\n * move to the front of the queue. If two values have the same priority,\n * it is arbitrary which value will come to the front of the queue first.\n */\n\n// TODO(user): Should this rely on natural ordering via some Comparable\n//     interface?\n\n\ngoog.module('goog.structs.PriorityQueue');\ngoog.module.declareLegacyNamespace();\n\nconst Heap = goog.require('goog.structs.Heap');\n\n\n/**\n * Class for Priority Queue datastructure.\n *\n * @extends {Heap<number, VALUE>}\n * @template VALUE\n * @final\n */\nclass PriorityQueue extends Heap {\n  /**\n   * Puts the specified value in the queue.\n   * @param {number} priority The priority of the value. A smaller value here\n   *     means a higher priority.\n   * @param {VALUE} value The value.\n   */\n  enqueue(priority, value) {\n    this.insert(priority, value);\n  }\n\n  /**\n   * Retrieves and removes the head of this queue.\n   * @return {VALUE} The element at the head of this queue. Returns undefined if\n   *     the queue is empty.\n   */\n  dequeue() {\n    return this.remove();\n  }\n}\nexports = PriorityQueue;\n","~:compiled-at",1728556195066,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.structs.priorityqueue.js\",\n\"lineCount\":19,\n\"mappings\":\"AAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAAA,cAAA;AAmBAA,MAAKC,CAAAA,MAAL,CAAY,4BAAZ,CAAA;AACAD,MAAKC,CAAAA,MAAOC,CAAAA,sBAAZ,EAAA;AAEA,MAAMC,OAAOH,IAAKI,CAAAA,OAAL,CAAa,mBAAb,CAAb;AAUA,MAAMC,gBAAN,QAAA,EAAA;AAAA,WAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAAA,GAAA;AAA4BF,SAAAA,CAAAA,QAAAA,CAAtBE,aAAsBF,EAAAA,IAAAA,CAAAA;AAO1B,eAAA,CAAA,SAAA,CAAA,OAAAG,GAAAA,QAAO,CAACC,QAAD,EAAWC,KAAX,CAAkB;AACvB,QAAKC,CAAAA,MAAL,CAAYF,QAAZ,EAAsBC,KAAtB,CAAA;AADuB,GAAzBF;AASA,eAAA,CAAA,SAAA,CAAA,OAAAI,GAAAA,QAAO,EAAG;AACR,WAAO,IAAKC,CAAAA,MAAL,EAAP;AADQ,GAAVD;AAIFE,SAAA,GAAUP,aAAV;AApDA,SAAA,OAAA;AAAA,CAAA,CAAA;;\",\n\"sources\":[\"goog/structs/priorityqueue.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview Datastructure: Priority Queue.\\n *\\n *\\n * This file provides the implementation of a Priority Queue. Smaller priorities\\n * move to the front of the queue. If two values have the same priority,\\n * it is arbitrary which value will come to the front of the queue first.\\n */\\n\\n// TODO(user): Should this rely on natural ordering via some Comparable\\n//     interface?\\n\\n\\ngoog.module('goog.structs.PriorityQueue');\\ngoog.module.declareLegacyNamespace();\\n\\nconst Heap = goog.require('goog.structs.Heap');\\n\\n\\n/**\\n * Class for Priority Queue datastructure.\\n *\\n * @extends {Heap<number, VALUE>}\\n * @template VALUE\\n * @final\\n */\\nclass PriorityQueue extends Heap {\\n  /**\\n   * Puts the specified value in the queue.\\n   * @param {number} priority The priority of the value. A smaller value here\\n   *     means a higher priority.\\n   * @param {VALUE} value The value.\\n   */\\n  enqueue(priority, value) {\\n    this.insert(priority, value);\\n  }\\n\\n  /**\\n   * Retrieves and removes the head of this queue.\\n   * @return {VALUE} The element at the head of this queue. Returns undefined if\\n   *     the queue is empty.\\n   */\\n  dequeue() {\\n    return this.remove();\\n  }\\n}\\nexports = PriorityQueue;\\n\"],\n\"names\":[\"goog\",\"module\",\"declareLegacyNamespace\",\"Heap\",\"require\",\"PriorityQueue\",\"enqueue\",\"priority\",\"value\",\"insert\",\"dequeue\",\"remove\",\"exports\"]\n}\n"]