{"version":3,"sources":["taoensso/sente/packers/transit.cljc"],"mappings":"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","names":["taoensso.sente.packers.transit/get-transit-writer-fn","taoensso.encore/memoize_","fmt","opts","writer","cognitect.transit.writer","x","cognitect.transit/write","taoensso.sente.packers.transit/get-transit-reader-fn","reader","cognitect.transit.reader","s","cognitect.transit/read","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","taoensso.sente.packers.transit/TransitPacker","taoensso.sente.packers.transit/->TransitPacker","transit-fmt","writer-opts","reader-opts","_","fexpr__17996","fexpr__17998","var_args","G__18000","taoensso.sente.packers.transit/get-transit-packer","js/Error","taoensso.sente.packers.transit.get_transit_packer","e","cljs.core/contains?","G__18004","taoensso.truss.impl/set*","taoensso.truss.impl/-dummy-error","e18003","taoensso.truss.impl/-invar-violation!","e18005","e18006","cljs.core/map?"],"sourcesContent":["(ns taoensso.sente.packers.transit\n  \"Alpha - subject to change!\n  Optional Transit-format[1] IPacker implementation for use with Sente.\n  [1] https://github.com/cognitect/transit-format.\"\n  {:author \"Peter Taoussanis, @ckarlsen84\"}\n\n  #?(:clj\n     (:require\n      [clojure.string :as str]\n      [taoensso.encore :as enc :refer (have have! have?)]\n      [taoensso.timbre :as timbre]\n      [cognitect.transit :as transit]\n      [taoensso.sente.interfaces :as interfaces :refer (pack unpack)]))\n\n  #?(:clj\n     (:import [java.io ByteArrayInputStream ByteArrayOutputStream]))\n\n  #?(:cljs\n     (:require\n      [clojure.string :as str]\n      [taoensso.encore :as enc :refer-macros (have have! have?)]\n      [cognitect.transit :as transit]\n      [taoensso.sente.interfaces :as interfaces :refer (pack unpack)])))\n\n#?(:clj\n   (defn- get-charset [transit-fmt]\n     ;; :msgpack appears to need ISO-8859-1 to retain binary data correctly when\n     ;; string-encoded, all other (non-binary) formats can get UTF-8:\n     (if (enc/kw-identical? transit-fmt :msgpack) \"ISO-8859-1\" \"UTF-8\")))\n\n#?(:clj\n   (def ^:private cache-read-handlers\n     \"reader-opts -> reader-opts with cached read handler map\"\n     (let [cache (enc/memoize_ (fn [m] (transit/read-handler-map m)))]\n       (fn [reader-opts]\n         (if-let [m (:handlers reader-opts)]\n           (assoc reader-opts :handlers (cache m))\n           reader-opts)))))\n\n#?(:clj\n   (def ^:private cache-write-handlers\n     \"writer-opts -> writer-opts with cached write handler map\"\n     (let [cache (enc/memoize_ (fn [m] (transit/write-handler-map m)))]\n       (fn [writer-opts]\n         (if-let [m (:handlers writer-opts)]\n           (assoc writer-opts :handlers (cache m))\n           writer-opts)))))\n\n#?(:clj\n   (def ^:private transit-writer-fn-proxy\n     (enc/thread-local-proxy\n       (fn [fmt opts]\n         (let [^String charset (get-charset fmt)\n               opts (cache-write-handlers opts)\n               ^ByteArrayOutputStream baos (ByteArrayOutputStream. 64)\n               writer (transit/writer baos fmt opts)]\n           (fn [x]\n             (transit/write writer x)\n             (let [result (.toString baos charset)]\n               (.reset baos)\n               result)))))))\n\n(def ^:private get-transit-writer-fn\n  \"Returns thread-safe (fn [x-to-write])\"\n  #?(:cljs\n     (enc/memoize_\n       (fn [fmt opts]\n         (let [writer (transit/writer fmt opts)]\n           (fn [x] (transit/write writer x)))))\n     :clj\n     (fn [fmt opts]\n       (let [thread-local-transit-writer-fn (.get ^ThreadLocal transit-writer-fn-proxy)]\n         (thread-local-transit-writer-fn fmt opts)))))\n\n(def ^:private get-transit-reader-fn\n  \"Returns thread-safe (fn [str-to-read])\"\n  #?(:cljs\n     (enc/memoize_\n       (fn [fmt opts]\n         (let [reader (transit/reader fmt opts)]\n           (fn [s] (transit/read reader s)))))\n     :clj\n     (fn [fmt opts]\n       (let [^String charset (get-charset fmt)\n             opts (cache-read-handlers opts)]\n         (fn [s]\n           (let [ba (.getBytes ^String s ^String charset)\n                 ^ByteArrayInputStream bais (ByteArrayInputStream. ba)\n                 reader (transit/reader bais fmt opts)]\n             (transit/read reader)))))))\n\n(deftype TransitPacker [transit-fmt writer-opts reader-opts]\n  taoensso.sente.interfaces/IPacker\n  (pack   [_ x] ((get-transit-writer-fn transit-fmt writer-opts) x))\n  (unpack [_ s] ((get-transit-reader-fn transit-fmt reader-opts) s)))\n\n(defn get-transit-packer \"Returns a new TransitPacker\"\n  ([           ] (get-transit-packer :json       {} {}))\n  ([transit-fmt] (get-transit-packer transit-fmt {} {}))\n  ([transit-fmt writer-opts reader-opts]\n   ;; No transit-cljs support for msgpack atm\n   (have? [:el #{:json #_:msgpack}] transit-fmt)\n   (have? map? writer-opts reader-opts)\n   (TransitPacker. transit-fmt writer-opts reader-opts)))\n\n(comment\n  (def tp (get-transit-packer))\n  (enc/qb 10000\n    (unpack tp (pack tp [:chsk/ws-ping \"foo\"]))\n    (enc/read-edn (enc/pr-edn [:chsk/ws-ping \"foo\"]))))\n"],"x_google_ignoreList":[0]}