{"version":3,"sources":["re_frisk_remote/delta/delta.cljc"],"mappings":"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","names":["re-frisk-remote.delta.delta/nullify","a","cljs.core/empty?","re-frisk-remote.delta.delta/delta-set","b","clojure.set.difference","re-frisk-remote.delta.delta/ff","k","cljs.core.not_EQ_","G__9786","G__9787","re-frisk-remote.delta.delta/delta","re-frisk-remote.delta.delta/delta-map-vals","ks","cljs.core.into","cljs.core.filter","cljs.core/some?","p1__9788#","cljs.core.map","re-frisk-remote.delta.delta/delta-map","akeys","cljs.core/set","cljs.core/keys","bkeys","common","clojure.set.intersection","add","remove","cljs.core/select-keys","re-frisk-remote.delta.delta/delta-seq-vals","n","items","cljs.core/vector","cljs.core.range","p__9800","vec__9806","cljs.core.nth","i","re-frisk-remote.delta.delta/delta-vec","ca","cljs.core/count","cb","mc","x__5090__auto__","y__5091__auto__","tail","cljs.core.subvec","cljs.core._EQ_","cljs.core/map?","cljs.core/set?","cljs.core/list?","cljs.core/vector?","p__9849","vec__9850","re-frisk-remote.delta.delta/apply-set","clojure.set.union","re-frisk-remote.delta.delta/apply-vec-changes","changes","cljs.core.reduce","p__9855","vec__9856","ch","p1__9854#","cljs.core.update_in","re-frisk-remote.delta.delta/apply","p__9863","vec__9865","re-frisk-remote.delta.delta/apply-vec","h","cljs.core/integer?","cljs.core/vec","cljs.core.concat","re-frisk-remote.delta.delta/apply-map-changes","p__9885","vec__9887","p1__9881#","p__9891","vec__9892","re-frisk-remote.delta.delta/apply-map","keys-add","keys-remove","A","cljs.core.merge","cljs.core.apply","cljs.core/dissoc","patch","G__9899","js/Error","cljs.core/first","cljs.core/second","cljs.core/rest"],"sourcesContent":["(ns re-frisk-remote.delta.delta\n  (:require [clojure.set :as set])\n  (:refer-clojure :exclude [apply]))\n\n;; diff description:\n;; [:replace x] -- replace current node with x\n;; [:set #{1 2} #{3 4}] -- add 1 2 and to the current node, remove 3 4\n;; [:map {1 2} #{3 4} {5 Z}] -- add (1 2) pair to current node, remove 3 4,\n;;   apply patch Z to the value of key 5\n;; [:seq 0 {6 Z}] -- apply patch Z to the value of key 6\n;; [:seq [5 6] {6 Z}] -- add values 5 and 6\n;; [:seq 3 {6 Z}] -- pop the last 3 values,\n;;   apply patch Z to the value of key 6\n\n(declare delta)\n\n;; Don't pass empty collections around, replace them with nulls\n(defn nullify [a]\n  (if (empty? a) nil a))\n\n(defn- delta-set [a b]\n  [:set (nullify (set/difference b a)) (nullify (set/difference a b))])\n\n(defn- ff [a b k]\n  (when (not= (a k) (b k))\n    [k (delta (a k) (b k))]))\n\n(defn- delta-map-vals [a b ks]\n  (nullify (into {} (filter some? (map #(ff a b %) ks)))))\n\n(defn- delta-map [a b]\n  (let [akeys (set (keys a))\n        bkeys (set (keys b))\n        common (set/intersection akeys bkeys)\n        add (set/difference bkeys akeys)\n        remove (nullify (set/difference akeys bkeys))]\n    [:map (nullify (select-keys b add)) remove (delta-map-vals a b common)]))\n\n(defn- delta-seq-vals [n a b]\n  (let [items (map vector (range) a b)]\n    (->> items\n         (map (fn [[i a b]] (when (not= a b) [i (delta a b)])))\n         (filter some?)\n         (into {}))))\n\n(defn- delta-vec [a b]\n  (let [ca (count a)\n        cb (count b)\n        mc (min ca cb)\n        tail (if (<= cb ca) (- ca cb) (subvec b ca))]\n    [:vec tail (nullify (delta-seq-vals mc a b))]))\n\n(defn delta [a b]\n  (cond\n    (= a b) nil\n    (and (map? a) (map? b)) (delta-map a b)\n    (and (set? a) (set? b)) (delta-set a b)\n    (and (list? a) (list? b)) [:replace b]\n    (and (vector? a) (vector? b)) (delta-vec a b)\n    :else [:replace b]))\n\n(declare apply)\n\n(defn- apply-set [a [add remove]]\n  (set/difference (set/union a add) remove))\n\n;; [1 2 3] {1 [:set 7]} -> [1 7 3]\n(defn- apply-vec-changes [a changes]\n  (reduce (fn [a [k ch]] (update-in a [k] #(apply % ch))) a changes))\n\n(defn- apply-vec [a [tail changes]]\n  (let [h (apply-vec-changes a changes)]\n    (cond\n      (= 0 tail) h\n      (integer? tail) (subvec h 0 (- (count h) tail))\n      :else (vec (concat h tail)))))\n\n;; {1 2 3 4} {3 [:set 6]} -> {1 2 3 6}\n(defn apply-map-changes [a changes]\n  (reduce (fn [a [k ch]] (update-in a [k] #(apply % ch))) a changes))\n\n(defn- apply-map [a [keys-add keys-remove changes]]\n  (as-> a A\n      (apply-map-changes A changes)\n      (merge keys-add A)\n      (clojure.core/apply dissoc A keys-remove)))\n\n(defn apply [a patch]\n  (case (first patch)\n    nil a\n    :replace (second patch)\n    :set (apply-set a (rest patch))\n    :vec (apply-vec a (rest patch))\n    :map (apply-map a (rest patch))))\n"],"x_google_ignoreList":[0]}