{"version":3,"sources":["steroid/rn/reloader.cljs"],"mappings":"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","names":["steroid.rn.reloader/debug?","js/goog.DEBUG","js/steroid","js/steroid.rn","js/steroid.rn.reloader","js/steroid.rn.reloader.warning?","steroid.rn.reloader/warning?","reagent.core.atom","js/steroid.rn.reloader.visible","steroid.rn.reloader/visible","js/steroid.rn.reloader.timeout","steroid.rn.reloader/timeout","cljs.core.atom","js/steroid.rn.reloader.label","steroid.rn.reloader/label","steroid.rn.reloader/build-competed","cljs.core/reset!","steroid.rn.reloader/build-failed","warnings","cljs.core/seq","cljs.core/count","steroid.rn.reloader/build-start","steroid.rn.reloader/reload-view","cljs.core/deref","js/clearTimeout","cljs.core._EQ_","js/setTimeout","steroid.rn.components.basic/view","cljs.core.merge","steroid.rn.components.basic/text","steroid.rn.components.ui/button","js/steroid.rn.reloader.state","steroid.rn.reloader/state","steroid.rn.reloader/persist-state","state-obj","js/Promise","resolve","_","steroid.rn.reloader/on-state-change","props","handler","or__5002__auto__","state","p__17175","map__17176","cljs.core/--destructure-map","cljs.core.get","steroid.rn.reloader/build-notify","type","info"],"sourcesContent":["(ns steroid.rn.reloader\n  (:require [reagent.core :as reagent]\n            [steroid.rn.components.basic :as basic]\n            [steroid.rn.components.ui :as ui]))\n\n(def debug? ^boolean js/goog.DEBUG)\n\n(defonce warning? (reagent/atom false))\n(defonce visible (reagent/atom false))\n(defonce timeout (atom false))\n(defonce label (reagent/atom \"\"))\n\n(defn build-competed []\n  (reset! label \"reloading\")\n  (reset! warning? false)\n  (reset! visible true))\n\n(defn build-failed [warnings]\n  (reset! warning? true)\n  (reset! label (str \"building failed\"\n                     (when (seq warnings)\n                       (str \"\\n\" (count warnings) \" warnings\"))))\n  (reset! visible true))\n\n(defn build-start []\n  (reset! warning? false)\n  (reset! label \"building\")\n  (reset! visible true))\n\n(defn reload-view []\n  (fn []\n    (when @timeout (js/clearTimeout @timeout))\n    (when (= @label \"reloading\")\n      (reset! timeout (js/setTimeout #(do (reset! visible false) (reset! label \"\")) 1000)))\n    (when @visible\n      [basic/view {:style         {:position        :absolute :top 0 :left 0 :right 0 :bottom 0\n                                   :justify-content :center :align-items :center}}\n       [basic/view {:style (merge {:width            64\n                                   :height           64\n                                   :border-color     :white\n                                   :background-color \"rgba(67,128,219,1)\"\n                                   :border-radius    32\n                                   :align-items      :center\n                                   :justify-content  :center\n                                   :border-width     2}\n                                  (when @warning?\n                                    {:opacity          0.8\n                                     :border-color     :red\n                                     :background-color \"rgba(255,0,0,0.5))\"}))}\n        [basic/text {:style {:color :white :font-size 30}} \"S\"]]\n       [basic/text {:style {:margin-top 10 :color :white\n                            :background-color (if @warning? \"rgba(255,0,0,0.5))\" \"rgba(67,128,219,1)\")}}\n        @label]\n       [ui/button {:title \"close\"\n                   :on-press #(reset! visible false)}]])))\n\n(defonce state (atom nil))\n\n(defn persist-state [state-obj]\n  (js/Promise.\n   (fn [resolve _]\n     (reset! state state-obj)\n     (resolve true))))\n\n(defn on-state-change [props]\n  (let [handler (or (:onStateChange props) (:on-state-change props))]\n    (fn [state]\n      (when debug?\n        (when handler (handler))\n        (persist-state state)))))\n\n(defn build-notify [{:keys [type info]}]\n  (cond (= :build-start type)\n        (build-start)\n        (or (= :build-failure type)\n            (and (= :build-complete type) (seq (:warnings info))))\n        (build-failed (:warnings info))\n        (= :build-complete type)\n        (build-competed)))"],"x_google_ignoreList":[0]}