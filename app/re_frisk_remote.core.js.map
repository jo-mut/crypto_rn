{"version":3,"sources":["re_frisk_remote/core.cljs"],"mappings":"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","names":["js/re-frisk-remote","js/re-frisk-remote.core","js/re-frisk-remote.core.send-state","re-frisk-remote.core/send-state","cljs.core.atom","js/re-frisk-remote.core.initialized","re-frisk-remote.core/initialized","js/re-frisk-remote.core.chsk-send","re-frisk-remote.core/chsk-send","js/re-frisk-remote.core.normalize-db-fn","re-frisk-remote.core/normalize-db-fn","js/re-frisk-remote.core.ignore-events","re-frisk-remote.core/ignore-events","re-frisk-remote.core/send","message","and__5000__auto__","cljs.core/deref","G__22188","fexpr__22187","re-frisk-remote.core/get-db","db","re-frame.db/app-db","fexpr__22189","re-frisk-remote.core/send-subs-delta","subs","re-frisk.utils/get-subs","temp__5804__auto__","d","re-frisk-remote.delta.delta/delta","cljs.core.swap_BANG_","cljs.core/assoc","re-frisk-remote.core/send-app-db-delta","re-frisk-remote.core/send-db-and-subs","js/re-frisk-remote.core.init-stat-sent","re-frisk-remote.core/init-stat-sent","re-frisk-remote.core/send-init-stat","cljs.core/reset!","re-frisk.stat/get-re-frame-handlers","re-frisk-remote.core/post-event-callback","value","queue","diff","re-frisk.diff.diff/diff","cljs.core/not","cljs.core.get","cljs.core/first","re-frisk.utils/call-and-chill","re-frisk-remote.core/send-views","views","cljs.core/seq","re-frisk-remote.core/trace-cb","traces","re-frisk.trace/update-views-and-get-traces","seq__22196","chunk__22197","count__22198","i__22199","vec__22207","cljs.core.nth","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__22210","cljs.core/next","i","trace","cljs.core.map_indexed","cljs.core/vector","re-frisk.trace/normalize-traces","js/setTimeout","js/re-frisk-remote.core.event-msg-handler","method-table__5599__auto__","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__22213","cljs.core/MultiFn","cljs.core.symbol","re-frisk-remote.core/event-msg-handler","p__22214","map__22216","cljs.core/--destructure-map","vec__22217","map__22220","map__22221","was-open?","now-open?","msg","cljs.core.not_EQ_","re-frisk-remote.core/enabled","p__22229","map__22230","vec__22231","type","data","G__22238","cljs.core/Keyword","js/Error","re-frisk-remote.core/start-socket-and-router","host","taoensso.timbre/merge-config!","map__22272","send-fn","ch-recv","taoensso.sente.make_channel_socket_client_BANG_","taoensso.sente.packers.transit.get_transit_packer","cognitect.transit.write_handler","taoensso.sente/start-client-chsk-router!","re-frisk-remote.core/patch-reagent!","day8.reagent.impl.component/patch-wrap-funs","day8.reagent.impl.batching/patch-next-tick","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frisk-remote.core/enable-re-frisk-remote!","p__22319","vec__22320","map__22323","seq22304","self__5712__auto__","opts","or__5002__auto__","re-frame.trace/is-trace-enabled?","re-frame.trace/register-trace-cb","re_frame.core.add_post_event_callback","re-frisk-remote.core/enable","p__22332","vec__22333","seq22328","params","re_frisk_remote.core.enable_re_frisk_remote_BANG_"],"sourcesContent":["(ns re-frisk-remote.core\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require\n   [re-frame.core :as re-frame]\n   [re-frame.db :as db]\n   [re-frame.trace]\n   [re-frisk.trace :as trace]\n   [re-frisk.utils :as utils]\n   [re-frisk.diff.diff :as diff]\n   [re-frisk-remote.delta.delta :as delta]\n   [taoensso.sente.packers.transit :as sente-transit]\n   [taoensso.sente :as sente]\n   [taoensso.timbre :as timbre]\n   [cognitect.transit :as transit]\n   [day8.reagent.impl.component :refer [patch-wrap-funs]]\n   [day8.reagent.impl.batching :refer [patch-next-tick]]\n   [re-frisk.stat :as stat]))\n\n;; if there are no opened tool web clients we don't want to send any data\n;; either nil (do not send), or a map with the following optional keys:\n;; :prev-app-db -- app DB last time :refrisk/app-db was sent\n;; :prev-event-app-db -- app DB last time :refrisk/events was sent\n;; :prev-subs -- subs last time :refrisk/subs was sent\n(defonce send-state (atom nil))\n(defonce initialized (atom false))\n\n(defonce chsk-send (atom {}))\n(defonce normalize-db-fn (atom nil))\n(defonce ignore-events (atom nil))\n\n(defn- send [message]\n  (when (and message @send-state @chsk-send)\n    (@chsk-send [:refrisk/message message])))\n\n(defn- get-db []\n  (let [db @db/app-db]\n    (if @normalize-db-fn (@normalize-db-fn db) db)))\n\n(defn- send-subs-delta []\n  (let [subs (utils/get-subs)]\n    (when-let [d (delta/delta (:prev-subs @send-state) subs)]\n      (swap! send-state assoc :prev-subs subs)\n      (send [:refrisk/subs-delta d]))))\n\n(defn- send-app-db-delta []\n  (let [db (get-db)]\n    (when-let [d (delta/delta (:prev-app-db @send-state) db)]\n      (swap! send-state assoc :prev-app-db db)\n      (send [:refrisk/app-db-delta d]))))\n\n(defn send-db-and-subs []\n  (send-subs-delta)\n  (send-app-db-delta))\n\n(defonce init-stat-sent (atom false))\n\n(defn send-init-stat []\n  (when-not @init-stat-sent\n    (reset! init-stat-sent true)\n    (send [:refrisk/init-stat (stat/get-re-frame-handlers)])))\n\n(defn- post-event-callback [value queue]\n  (when @send-state\n    (let [db   (get-db)\n          ;;This diff may be expensive\n          diff (diff/diff (:prev-event-app-db @send-state) db)]\n      (send-init-stat)\n      (swap! send-state assoc :prev-event-app-db db)\n      (when (or (not @ignore-events) (not (get @ignore-events (first value))))\n        (send [:refrisk/event {:event       value\n                               :app-db-diff diff\n                               :queue       queue}]))\n      (utils/call-and-chill send-db-and-subs 500))))\n\n(defn send-views [views]\n  (when (seq views)\n    (send [:refrisk/views views])))\n\n(defn trace-cb [traces]\n  (when @send-state\n    (send-init-stat)\n    (utils/call-and-chill send-db-and-subs 500)\n    (let [traces (trace/update-views-and-get-traces send-views traces)]\n      (doseq [[i trace] (map-indexed vector (trace/normalize-traces traces @ignore-events))]\n        (js/setTimeout #(send [:refrisk/event trace]) (* i 20))))))\n\n(defmulti event-msg-handler \"Sente `event-msg`s handler\" :id)\n\n(defmethod event-msg-handler :chsk/state\n  [{[{was-open? :open?} {now-open? :open?}] :?data :as msg}]\n  (if (not= was-open? now-open?)\n    (reset! send-state nil)))\n\n(defn- enabled []\n  (if @send-state\n    (do\n      (send [:refrisk/subs (:prev-subs @send-state)])\n      (send [:refrisk/app-db (:prev-app-db @send-state)]))\n    (let [db   (get-db)\n          subs (utils/get-subs)]\n      (reset! send-state {:prev-event-app-db db\n                          :prev-app-db       db\n                          :prev-subs         subs})\n      (send [:refrisk/subs subs])\n      (send [:refrisk/app-db db]))))\n\n(defmethod event-msg-handler :chsk/recv\n  [{[type data] :?data}]\n  (case type\n    :refrisk/enable (enabled)\n    :refrisk/disable (reset! send-state nil)))\n\n(defmethod event-msg-handler :default [msg]\n  nil)\n\n(defn- start-socket-and-router [host]\n  (timbre/merge-config! {:ns-blacklist [\"taoensso.sente\" \"taoensso.sente.*\"]})\n  (let [{:keys [send-fn ch-recv]}\n        (sente/make-channel-socket-client!\n         \"/chsk\"\n         nil\n         {:type     :auto\n          :host     host\n          :protocol :http\n          :params   {:kind :re-frisk-remote}\n          :packer   (sente-transit/get-transit-packer\n                     :json\n                     {:handlerForForeign #(transit/write-handler (fn [] \"ForeignType\") (fn [] \"\"))}\n                     {})})]\n    (reset! chsk-send send-fn)\n    (sente/start-client-chsk-router! ch-recv event-msg-handler)))\n\n(defn patch-reagent! []\n  (patch-wrap-funs)\n  (patch-next-tick))\n\n(defn enable-re-frisk-remote! [& [{:keys [host] :as opts}]]\n  (when-not @initialized\n    (reset! initialized true)\n    (reset! normalize-db-fn (:normalize-db-fn opts))\n    (reset! ignore-events (:ignore-events opts))\n    (start-socket-and-router (or host \"localhost:4567\"))\n    (if (re-frame.trace/is-trace-enabled?)\n      (do\n        (patch-reagent!)\n        (re-frame.trace/register-trace-cb :re-frisk-trace trace-cb))\n      (re-frame/add-post-event-callback post-event-callback))))\n\n(defn enable [& [params]]\n  (enable-re-frisk-remote! params))"],"x_google_ignoreList":[0]}