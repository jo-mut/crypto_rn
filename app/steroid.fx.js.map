{"version":3,"sources":["steroid/fx.cljs"],"mappings":";AAKA,uBAAA,vBAAOA,sDAAWC,KAAKC;AAAvB,AACE,IAAAC,qBAAY,AAAA,8EAAKD;AAAjB,AAAA,oBAAAC;AAAA,SAAAA,LAASC;AAAT,AACE,0DAAA,nDAACC,8CAAMJ,qDAASG;;AAChBH;;;AAEJ,AAAeK,kCAAqB,6CAAA,7CAACC;AAErC,sCAAA,tCAAMC,oFAA0BC;AAAhC,AACE,OAACC,sBAAOJ,gCAAqBG;;AAE/B,8BAAA,9BAAMG,oEAAkBC;AAAxB,AAAA,0FAAA,AAAAF,gBACIL,iCAAqBO;;AAEzB,AAAeC,4BAAe,6CAAA,7CAACP;AAE/B,gCAAA,hCAAMQ,wEAAoBN;AAA1B,AACE,OAACC,sBAAOI,0BAAeL;;AAEzB,wBAAA,xBAAOO,wDAAYd,GAAGe;AAAtB,AACE,oBAAI,AAAA,kIAA8Bf;AAChCA;;AACA,OAACgB,+CAAoB,qBAAAC,VAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAgBG;QAAhB,AAAAF,4CAAAD,WAAA,IAAA,/DAAkBI;AAAlB,AACE,GAAI,6CAAA,7CAACC,6FAAMF;AACT,+DAAA,xDAAClB,8CAAMiB,0DAAcE;;AACrB,oBAAI,AAACE,4CAAIJ,UAAUC;AACjB,oBAAI,4CAAA,AAAAZ,5CAACe,4DAAKZ,2BAAeS;AACvB,OAACI,+CAAOL,UAAUC,EAAEK,eAAKJ;;AACzB,yBAAA,2CAAA,7DAACK,iKAAsCN;;;AACzC,OAAClB,8CAAMiB,UAAUC,EAAEC;;;GACzBtB,GACAe;;;AAEzB,AAAA;;;;;;;;;;mBAAA,2BAAAa,9CAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,sDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,wDAAA,WAAAG,nEAAMD,4EASqBS;AAT3B,AAAA,IAAAP,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PASmBrC;SATnB,AAAAyB,4CAAAY,eAAA,hEASWlC;AATX,AAUE,IAAA0C,aAA8BD;IAA9BE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAP,gBAAAK;IAAAA,iBAAA,AAAAJ,eAAAI;gBAAAE,ZAAOC;gBAAPH,ZAAmBI;IACbC,qBAAa,AAACC,qBAAKH;IACnBI,SAAO,EAAIF,oBAAaD,UAAUN;AAFxC,AAGE,OAAC3B,+CAAoB,WAAKqC,IAAIC;AAAT,AACE,IAAMC,eAAa,AAACzD,qBAAUC,KAAKsD;AAAnC,AACE,oBAAIC;AACF,OAACxC,sBAAWuC,IAAI,CAACC,sCAAAA,oDAAAA,hBAAMC,iCAAAA;;AACvBF;;GACN,gCAAA,2CAAA,zEAAIH,oBAAaF,qGAAe9C,YAChCkD;;;AAnBzB,CAAA,2CAAA,3CAAMlB;;AAAN;AAAA,CAAA,qCAAA,WAAAI,hDAAMJ;AAAN,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA","names":["steroid.fx/update-db","cofx","fx","temp__5802__auto__","db","cljs.core.assoc","steroid.fx/default-interceptors","cljs.core.atom","steroid.fx/set-default-interceptors","value","cljs.core/reset!","cljs.core/deref","steroid.fx/get-interceptors","interceptors","steroid.fx/mergeable-keys","steroid.fx/set-mergeable-keys","steroid.fx/safe-merge","new-fx","cljs.core.reduce","p__17463","vec__17464","cljs.core.nth","merged-fx","k","v","cljs.core._EQ_","cljs.core.get","cljs.core.update","cljs.core/into","cljs.core/reduced","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","steroid.fx/merge","p__17472","map__17473","cljs.core/--destructure-map","seq17470","G__17471","cljs.core/first","cljs.core/next","self__5711__auto__","args","vec__17474","seq__17475","cljs.core/seq","first__17476","first-arg","rest-args","initial-fxs?","cljs.core/map?","fx-fns","fxs","fx-fn","updated-cofx"],"sourcesContent":["(ns steroid.fx\n  (:require-macros steroid.fx)\n  (:require re-frame.core)\n  (:refer-clojure :exclude [merge reduce]))\n\n(defn- update-db [cofx fx]\n  (if-let [db (:db fx)]\n    (assoc cofx :db db)\n    cofx))\n\n(def ^:private default-interceptors (atom []))\n\n(defn set-default-interceptors [value]\n  (reset! default-interceptors value))\n\n(defn get-interceptors [interceptors]\n  [@default-interceptors interceptors])\n\n(def ^:private mergeable-keys (atom #{}))\n\n(defn set-mergeable-keys [value]\n  (reset! mergeable-keys value))\n\n(defn- safe-merge [fx new-fx]\n  (if (:merging-fx-with-common-keys fx)\n    fx\n    (clojure.core/reduce (fn [merged-fx [k v]]\n                           (if (= :db k)\n                             (assoc merged-fx :db v)\n                             (if (get merged-fx k)\n                               (if (get @mergeable-keys k)\n                                 (update merged-fx k into v)\n                                 (reduced {:merging-fx-with-common-keys k}))\n                               (assoc merged-fx k v))))\n                         fx\n                         new-fx)))\n\n(defn merge\n  \"Takes a map of co-effects and forms as argument.\n  The first optional form can be map of effects\n  The next forms are functions applying effects and returning a map of effects.\n  The fn ensures that updates to db are passed from function to function within the cofx :db key and\n  that only a :merging-fx-with-common-keys effect is returned if some functions are trying\n  to produce the same effects (excepted :db, :data-source/tx effects).\n  :data-source/tx and effects are handled specially and their results\n  (list of transactions) are compacted to one transactions list (for each effect). \"\n  [{:keys [db] :as cofx} & args]\n  (let [[first-arg & rest-args] args\n        initial-fxs? (map? first-arg)\n        fx-fns (if initial-fxs? rest-args args)]\n    (clojure.core/reduce (fn [fxs fx-fn]\n                           (let [updated-cofx (update-db cofx fxs)]\n                             (if fx-fn\n                               (safe-merge fxs (fx-fn updated-cofx))\n                               fxs)))\n                         (if initial-fxs? first-arg {:db db})\n                         fx-fns)))"],"x_google_ignoreList":[0]}